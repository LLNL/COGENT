********************************
*This program creates an extended flux-aligned grid and 
*the corresponding COGENT mapping for a given g-eqdsk file.
*******************************

******************************
*How to build the code
******************************

make gridGenerator MPI=TRUE OPT=TRUE DEBUG=FALSE DIM=2

******************************
*How to run the grid-generator
******************************

An example scripts to run this grid generator are runGridGen_hr 
and runGridGen_cr for high- and coarse- resolution cases.

The script variables are defined as follows:
[1] program executable 
[2] name of the DCT file
[3] normalized flux at the inner core boundary
[4] normalized flux at the outer sol boundary
[5] number of radial cells in the core region
[6] number of poloidal cells in the core region
[7] number of poloidal cells in the inner leg
[8] number of poloidal cells in the outer leg
[9] number of radial cells in the PF region
[10] number of poloidal cells in the mcore region (set to 0 for original 8 blocks)
[11] number of poloidal extrapolation cells in the inner leg
[12] number of poloidal extrapolation cells in the outer leg
[13] number of radial ghost cells
[14] number of poloidal ghost cells
[15] transition radius (set to a negative value for flux-aligned grids)
[16] initial (r) guess for Xpt
[17] initial (z) guess for Xpt
[18] initial (r) guess for Opt
[19] initial (z) guess for Opt

The last 4 arguments are optional, and if not specified, 
the the critical point data is read from a DCT file, 
and a local critical-point solver is not invoked.

****************************
*How to view the output
****************************

The output is dumped into /output folder, which also contains 
matlab scripts to view the results:

-Plot entire grid
plotEntireGrid() 

-Plot valid cells of a given block (e.g., block 1).
load coords1
plot_coords(coords1) 

-Plot extended grid for a given block (e.g., block 0)
load extended_coords0
plot_coords(extended_coords0) 


*************************************
*Utilities / how to create a DCT file
*************************************

The subfolder utilities contains matlab scripts to read g-eqdsk file,
extract the magnetic flux data, smooth it, and produce a DCT-file. smoothed
 of the g-eqdsk file, which contains the smoothed-psi is generated as well.

Example:

smooth_eqdsk('g153523.03745', 1000) 

will run the matlab script on the g-file g153523.03745 (currently exists in /utilities folder)
with the smoothing parameter s = 1000, and will produce two output files: 
g153523.03745_dct and g153523.03745_smoothed. This example should be run by setting 
zSmin = -1.3 in smooth_eqdsk.m in order to have smoothed psi structure in the bottom-left corner
(required later for longer-leg extrapolation in the above gridGenerator example). 

The smoothing occurs as a result of two steps:
(a) A least-square fit is obtained by making use of the RBF functions: I[n]/(r[n]+r0). 
(b) A robust smoothing algorithm [Garcia D, Computational Statistics & Data Analysis, 2009]
 is applied to the fit.


***********************************
*Additional general notes/comments:
***********************************

(1) Smooth_eqdsk computes Xpt for the smoothed geometry, but returns the magnetic 
axis location for the original geometry. 

(2) For the case of a fine poloidal mesh we may need to increase the number of radial cells
as well (see the high-resolution example). Otherwise, the radial gridlines launched from
the separatrix in the X-point vicinity may cross block cuts.


