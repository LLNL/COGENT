#include "CONSTANTS.H"

      subroutine reflect_flux(
     &     CHF_FRA1[outflux],
     &     CHF_BOX[bdrybox],
     &     CHF_CONST_FRA1[influx],
     &     CHF_CONST_REAL[R_coeff],
     &     CHF_CONST_INT[idir],
     &     CHF_CONST_INT[iside]
     &     )
c
      integer CHF_DDECL[i;j;k]
      integer CHF_DDECL[i1;j1;k1]
      integer CHF_DDECL[iv0;iv1;iv2]
      integer CHF_DDECL[ibeg0;ibeg1;ibeg2]
      integer CHF_DDECL[ng0;ng1;ng2]
      integer isign, comp
      integer ng(0:CH_SPACEDIM-1),gn(0:CH_SPACEDIM-1)
      double precision flux_bnd

      isign = 2*iside-1
c
      CHF_DTERM[
      i1 = isign * CHF_ID(idir,0);
      j1 = isign * CHF_ID(idir,1);
      k1 = isign * CHF_ID(idir,2)]
c
      CHF_DTERM[
      ng0 = CHF_UBOUND[bdrybox;0]-CHF_LBOUND[bdrybox;0];
      ng1 = CHF_UBOUND[bdrybox;1]-CHF_LBOUND[bdrybox;1];
      ng2 = CHF_UBOUND[bdrybox;2]-CHF_LBOUND[bdrybox;2]]
c
c     *** ibeg - index of the first ghost cell outside the boundary
      CHF_DTERM[
      ibeg0 = ibdryboxlo0+CHF_ID(idir,0)*(1-iside)*ng0;
      ibeg1 = ibdryboxlo1+CHF_ID(idir,1)*(1-iside)*ng1;
      ibeg2 = ibdryboxlo2+CHF_ID(idir,2)*(1-iside)*ng2]
c
      CHF_MULTIDO[bdrybox;i;j;k]
c
        CHF_DTERM[
        iv0 = i+CHF_ID(idir,0)*(ibeg0-i);
        iv1 = j+CHF_ID(idir,1)*(ibeg1-j);
        iv2 = k+CHF_ID(idir,2)*(ibeg2-k)]

        if ( isign .eq. 1  ) then

c        *** get boundary flux value 
c        *** use ghost cell index at high side 
         flux_bnd = influx(CHF_IX[iv0;iv1;iv2])

c        *** check for outflow   
         if ( isign*flux_bnd .ge. zero  ) then

c        *** fill outflux 

           outflux(CHF_IX[iv0;iv1;iv2]) = - R_coeff * flux_bnd

         else

           outflux(CHF_IX[iv0;iv1;iv2]) = zero

         endif  

        endif


        if ( isign .eq. -1  ) then

c        *** get boundary flux value 
c        *** use first valid cell index at low side 
         flux_bnd = influx(CHF_IX[iv0-i1;iv1-j1;iv2-k1])

c        *** check for outflow   
         if ( isign*flux_bnd .ge. zero  ) then

c        *** fill outflux 

           outflux(CHF_IX[iv0-i1;iv1-j1;iv2-k1]) = - R_coeff * flux_bnd

         else

           outflux(CHF_IX[iv0-i1;iv1-j1;iv2-k1]) = zero

         endif  

        endif

      CHF_ENDDO

      return
      end


      subroutine extrap_to_ghosts(
     &     CHF_FRA[dst],
     &     CHF_BOX[bdrybox],
     &     CHF_CONST_FRA[src],
     &     CHF_CONST_REAL[R_coeff],
     &     CHF_CONST_INT[idir],
     &     CHF_CONST_INT[iside]
     &     )
c
      integer CHF_DDECL[i;j;k]
      integer CHF_DDECL[i1;j1;k1]
      integer CHF_DDECL[iv0;iv1;iv2]
      integer CHF_DDECL[ibeg0;ibeg1;ibeg2]
      integer CHF_DDECL[ng0;ng1;ng2]
      integer isign, n
      integer ng(0:CH_SPACEDIM-1),gn(0:CH_SPACEDIM-1)
      double precision flux_bnd

      isign = 2*iside-1
c
      CHF_DTERM[
      i1 = isign * CHF_ID(idir,0);
      j1 = isign * CHF_ID(idir,1);
      k1 = isign * CHF_ID(idir,2)]
c
      CHF_DTERM[
      ng0 = CHF_UBOUND[bdrybox;0]-CHF_LBOUND[bdrybox;0];
      ng1 = CHF_UBOUND[bdrybox;1]-CHF_LBOUND[bdrybox;1];
      ng2 = CHF_UBOUND[bdrybox;2]-CHF_LBOUND[bdrybox;2]]
c
c     *** ibeg - index of the first ghost cell outside the boundary
      CHF_DTERM[
      ibeg0 = ibdryboxlo0+CHF_ID(idir,0)*(1-iside)*ng0;
      ibeg1 = ibdryboxlo1+CHF_ID(idir,1)*(1-iside)*ng1;
      ibeg2 = ibdryboxlo2+CHF_ID(idir,2)*(1-iside)*ng2]
c
      CHF_MULTIDO[bdrybox;i;j;k]
c
        CHF_DTERM[
        iv0 = i+CHF_ID(idir,0)*(ibeg0-i);
        iv1 = j+CHF_ID(idir,1)*(ibeg1-j);
        iv2 = k+CHF_ID(idir,2)*(ibeg2-k)]

c       *** compute the ghost value for cell-centered src (for a single layer of ghosts)   
c       *** by extrapolation from the first two valid cells adjacent to the boundary

        do n = 0, CHF_NCOMP[dst]-1
          dst(CHF_IX[iv0;iv1;iv2],n) = (five/two) * src(CHF_IX[iv0-i1;iv1-j1;iv2-k1],n) 
     &                               - (three/two) * src(CHF_IX[iv0-2*i1;iv1-2*j1;iv2-2*k1],n) 
        enddo

      CHF_ENDDO

      return
      end
