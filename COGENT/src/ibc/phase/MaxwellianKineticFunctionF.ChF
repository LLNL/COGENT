#include "CONSTANTS.H"

      subroutine set_maxwell4d(
     &     CHF_FRA[f],
     &     CHF_BOX[box],
     &     CHF_CONST_FRA[coords],
     &     CHF_CONST_FRA1[dens],
     &     CHF_CONST_FRA1[temp],
     &     CHF_CONST_FRA1[vshift],
     &     CHF_CONST_FRA1[b],
     &     CHF_CONST_REAL[mass],

     &     )
c     Sets distribution function for 2D temperature and density
      integer CHF_DDECL[i;j;k;l;m],n
      integer ivp,imu
      REAL_T denloc, temploc, vshiftloc, bloc
      REAL_T vpar, mu
      REAL_T eparnorm, munorm
      REAL_T factor, val
      REAL_T minf, maxf
c
      minf=1.0d30
      maxf=zero
c
      factor = dsqrt(PI*(two/mass)**3)
c
      ivp = CHF_NCOMP[coords]-2
      imu = CHF_NCOMP[coords]-1

c
      do n=0,CHF_NCOMP[f]-1
      CHF_MULTIDO[box;i;j;k;l;m]
c
#if CH_SPACEDIM==4
         vshiftloc = vshift(i,j,CHF_LBOUND[temp;2],CHF_LBOUND[temp;3])
         temploc   = temp(i,j,CHF_LBOUND[temp;2],CHF_LBOUND[temp;3])
         denloc    = dens(i,j,CHF_LBOUND[dens;2],CHF_LBOUND[dens;3])
         bloc      = b(i,j,CHF_LBOUND[b;2],CHF_LBOUND[b;3])
#else
         vshiftloc = vshift(i,j,k,CHF_LBOUND[temp;3],CHF_LBOUND[temp;4])
         temploc   = temp(i,j,k,CHF_LBOUND[temp;3],CHF_LBOUND[temp;4])
         denloc    = dens(i,j,k,CHF_LBOUND[dens;3],CHF_LBOUND[dens;4])
         bloc      = b(i,j,k,CHF_LBOUND[b;3],CHF_LBOUND[b;4])
#endif
c
         vpar     = coords(CHF_IX[i;j;k;l;m],ivp)
         mu       = coords(CHF_IX[i;j;k;l;m],imu)
         eparnorm = half * mass * (vpar-vshiftloc)**2 / temploc
         munorm   = half * bloc * mu / temploc
         val      = dexp( -( eparnorm + munorm ) )

c
         val    = val * denloc / ( factor * dsqrt( temploc) * temploc )
c
         minf = min(minf,val)
         maxf = max(maxf,val)
         f(CHF_IX[i;j;k;l;m],n) = val
c
      CHF_ENDDO
      enddo
c

      return
      end

      subroutine set_canonical_maxwell(
     &     CHF_FRA[f],
     &     CHF_BOX[box],
     &     CHF_CONST_FRA[coords],
     &     CHF_CONST_FRA[toroidal_coords],
     &     CHF_CONST_FRA1[B_inj],
     &     CHF_CONST_FRA1[psi_inj],
     &     CHF_CONST_REAL[RBtor],
     &     CHF_CONST_REAL[psi_p],
     &     CHF_CONST_REAL[dpsidr_p],
     &     CHF_CONST_REAL[n_val],
     &     CHF_CONST_REAL[n_kappa],
     &     CHF_CONST_REAL[n_width],
     &     CHF_CONST_REAL[T_val],
     &     CHF_CONST_REAL[T_kappa],
     &     CHF_CONST_REAL[T_width],
     &     CHF_CONST_REALVECT[mode_coeff],
     &     CHF_CONST_REAL[mass],
     &     CHF_CONST_REAL[charge],
     &     CHF_CONST_REAL[larmor]
     &     )
c     Sets distribution function for 5D canonical Maxwellian
c     with (m,n) [poloilda, toridal] perturbations

      integer CHF_DDECL[i;j;k;l;m],n
      integer ivp,imu
      REAL_T den, temp, B, psi
      REAL_T psi_inv, vpar, mu, phi, theta
      REAL_T eparnorm, munorm
      REAL_T factor, norm, val, arg, pi

      pi = four*datan(one)

      norm      = larmor * mass / charge
      factor    = dsqrt(PI*(two/mass)**3)

      ivp = CHF_NCOMP[coords]-2
      imu = CHF_NCOMP[coords]-1

      do n=0,CHF_NCOMP[f]-1
      CHF_MULTIDO[box;i;j;k;l;m]

#if CH_SPACEDIM==4
         B      = B_inj(i,j,CHF_LBOUND[B_inj;2],CHF_LBOUND[B_inj;3])
         psi    = psi_inj(i,j,CHF_LBOUND[psi_inj;2],CHF_LBOUND[psi_inj;3])
#else
         B      = B_inj(i,j,k,CHF_LBOUND[B_inj;3],CHF_LBOUND[B_inj;4])
         psi    = psi_inj(i,j,k,CHF_LBOUND[psi_inj;3],CHF_LBOUND[psi_inj;4])

         phi    = toroidal_coords(i,j,k,CHF_LBOUND[toroidal_coords;3],CHF_LBOUND[toroidal_coords;4],1)
         theta  = toroidal_coords(i,j,k,CHF_LBOUND[toroidal_coords;3],CHF_LBOUND[toroidal_coords;4],2)
#endif

         vpar     = coords(CHF_IX[i;j;k;l;m],ivp)
         mu       = coords(CHF_IX[i;j;k;l;m],imu)

         psi_inv = psi + norm*RBtor/B*vpar  
          
         den   = n_val * dexp(-n_kappa * n_width * dtanh((psi_inv-psi_p)/n_width))  
         temp  = T_val * dexp(-T_kappa * T_width * dtanh((psi_inv-psi_p)/T_width))  

         eparnorm = half * mass * vpar**2 / temp
         munorm   = half * B * mu / temp
         val      = dexp( -( eparnorm + munorm ) )

         val      = val * den / ( factor * dsqrt( temp) * temp )

c        Add perturbations
         
         arg      = mode_coeff(1)*phi + mode_coeff(2)*theta
         val      = val * (one + mode_coeff(0)*cos(arg))

         f(CHF_IX[i;j;k;l;m],n) = val

      CHF_ENDDO
      enddo

      return
      end

