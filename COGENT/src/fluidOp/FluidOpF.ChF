
c    COMPUTE FLUX-FREEZING SPEED

      subroutine eval_flux_freezing_speed(
     &     CHF_BOX[gridbox],
     &     CHF_CONST_FRA1[RHO],
     &     CHF_CONST_FRA1[P],
     &     CHF_CONST_FRA1[magP],
     &     CHF_CONST_FRA[V],
     &     CHF_CONST_FRA[N],
     &     CHF_CONST_FRA1[J],
     &     CHF_CONST_REAL[gamma],
     &     CHF_CONST_INT[includeP],
     &     CHF_CONST_INT[includePmag],
     &     CHF_FRA[Cspeed]
     &     )

c     local variables
      integer CHF_AUTODECL[i]
      double precision C0, Cspeed1, Cspeed2, Cspeed3, Vmap1, Vmap2, Vmap3
      double precision dq1dx1, dq1dx2, dq1dx3
      double precision dq2dx1, dq2dx2, dq2dx3
      double precision dq3dx1, dq3dx2, dq3dx3

c        print*, "shape N_cent       = ", shape(N)

      CHF_AUTOMULTIDO[gridbox;i]

         C0  = sqrt( ( includeP*gamma*P(CHF_AUTOIX[i]) 
     &               + includePmag*2.0*magP(CHF_AUTOIX[i]) )/RHO(CHF_AUTOIX[i]) )

         if (CH_SPACEDIM==3) then
            
            dq1dx1 = N(CHF_AUTOIX[i],0)/J(CHF_AUTOIX[i])
            dq1dx2 = N(CHF_AUTOIX[i],3)/J(CHF_AUTOIX[i])
            dq1dx3 = N(CHF_AUTOIX[i],6)/J(CHF_AUTOIX[i])
            dq2dx1 = N(CHF_AUTOIX[i],1)/J(CHF_AUTOIX[i])
            dq2dx2 = N(CHF_AUTOIX[i],4)/J(CHF_AUTOIX[i])
            dq2dx3 = N(CHF_AUTOIX[i],7)/J(CHF_AUTOIX[i])
            dq3dx1 = N(CHF_AUTOIX[i],2)/J(CHF_AUTOIX[i])
            dq3dx2 = N(CHF_AUTOIX[i],5)/J(CHF_AUTOIX[i])
            dq3dx3 = N(CHF_AUTOIX[i],8)/J(CHF_AUTOIX[i])
            
            Vmap1 = dq1dx1*V(CHF_AUTOIX[i],0) 
     &            + dq1dx2*V(CHF_AUTOIX[i],1) 
     &            + dq1dx3*V(CHF_AUTOIX[i],2) 
            Vmap2 = dq2dx1*V(CHF_AUTOIX[i],0) 
     &            + dq2dx2*V(CHF_AUTOIX[i],1) 
     &            + dq2dx3*V(CHF_AUTOIX[i],2) 
            Vmap3 = dq3dx1*V(CHF_AUTOIX[i],0) 
     &            + dq3dx2*V(CHF_AUTOIX[i],1) 
     &            + dq3dx3*V(CHF_AUTOIX[i],2) 
 
            Cspeed1  = C0*sqrt( dq1dx1**2 + dq1dx2**2 + dq1dx3**2 )
            Cspeed2  = C0*sqrt( dq2dx1**2 + dq2dx2**2 + dq2dx3**2 )
            Cspeed3  = C0*sqrt( dq3dx1**2 + dq3dx2**2 + dq3dx3**2 )
            
            Cspeed(CHF_AUTOIX[i],0) = abs(Vmap1) + Cspeed1
            Cspeed(CHF_AUTOIX[i],1) = abs(Vmap2) + Cspeed2
            Cspeed(CHF_AUTOIX[i],2) = abs(Vmap3) + Cspeed3
     
         else

            dq1dx1 = N(CHF_AUTOIX[i],0)/J(CHF_AUTOIX[i])
            dq1dx2 = N(CHF_AUTOIX[i],2)/J(CHF_AUTOIX[i])
            dq2dx1 = N(CHF_AUTOIX[i],1)/J(CHF_AUTOIX[i])
            dq2dx2 = N(CHF_AUTOIX[i],3)/J(CHF_AUTOIX[i])
      
            Vmap1 = dq1dx1*V(CHF_AUTOIX[i],0) 
     &            + dq1dx2*V(CHF_AUTOIX[i],1) 
            Vmap2 = dq2dx1*V(CHF_AUTOIX[i],0) 
     &            + dq2dx2*V(CHF_AUTOIX[i],1) 
 
            Cspeed1  = C0*sqrt( dq1dx1**2 + dq1dx2**2 )
            Cspeed2  = C0*sqrt( dq2dx1**2 + dq2dx2**2 )
c            print*, "shape(P)   = ", shape(P)
c            print*, "Cspeed1    = ", Cspeed1
c            print*, "CHF_AUTOIX[i]    = ", CHF_AUTOIX[i]
c            print*, "dq1dx1    = ", dq1dx1
c            print*, "dq1dx2    = ", dq1dx2
c            print*, "dq2dx1    = ", dq2dx1
c            print*, "dq2dx2    = ", dq2dx2

            Cspeed(CHF_AUTOIX[i],0) = abs(Vmap1) + Cspeed1
            Cspeed(CHF_AUTOIX[i],1) = abs(Vmap2) + Cspeed2
c            Cspeed(CHF_AUTOIX[i],0) = abs(V(CHF_AUTOIX[i],0)) + C0
c            Cspeed(CHF_AUTOIX[i],1) = abs(V(CHF_AUTOIX[i],1)) + C0
      
         endif
 
      CHF_ENDDO

      return
      end

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c    COMPUTE MAPPED LIGHT SPEED

      subroutine eval_mapped_light_speed(
     &     CHF_BOX[gridbox],
     &     CHF_CONST_FRA[N],
     &     CHF_CONST_FRA1[J],
     &     CHF_CONST_REAL[delta],
     &     CHF_FRA[Clight]
     &     )

c     local variables
      integer CHF_AUTODECL[i]
      double precision C0
      double precision dq1dx1, dq1dx2, dq1dx3
      double precision dq2dx1, dq2dx2, dq2dx3
      double precision dq3dx1, dq3dx2, dq3dx3

      C0  = one/sqrt( delta )

      CHF_AUTOMULTIDO[gridbox;i]

         if (CH_SPACEDIM==3) then

            dq1dx1 = N(CHF_AUTOIX[i],0)/J(CHF_AUTOIX[i])
            dq1dx2 = N(CHF_AUTOIX[i],3)/J(CHF_AUTOIX[i])
            dq1dx3 = N(CHF_AUTOIX[i],6)/J(CHF_AUTOIX[i])
            dq2dx1 = N(CHF_AUTOIX[i],1)/J(CHF_AUTOIX[i])
            dq2dx2 = N(CHF_AUTOIX[i],4)/J(CHF_AUTOIX[i])
            dq2dx3 = N(CHF_AUTOIX[i],7)/J(CHF_AUTOIX[i])
            dq3dx1 = N(CHF_AUTOIX[i],2)/J(CHF_AUTOIX[i])
            dq3dx2 = N(CHF_AUTOIX[i],5)/J(CHF_AUTOIX[i])
            dq3dx3 = N(CHF_AUTOIX[i],8)/J(CHF_AUTOIX[i])

            Clight(CHF_AUTOIX[i],0) = C0*sqrt( dq1dx1**2 + dq1dx2**2 + dq1dx3**2 )
            Clight(CHF_AUTOIX[i],1) = C0*sqrt( dq2dx1**2 + dq2dx2**2 + dq2dx3**2 )
            Clight(CHF_AUTOIX[i],2) = C0*sqrt( dq3dx1**2 + dq3dx2**2 + dq3dx3**2 )

         else

            dq1dx1 = N(CHF_AUTOIX[i],0)/J(CHF_AUTOIX[i])
            dq1dx2 = N(CHF_AUTOIX[i],2)/J(CHF_AUTOIX[i])
            dq2dx1 = N(CHF_AUTOIX[i],1)/J(CHF_AUTOIX[i])
            dq2dx2 = N(CHF_AUTOIX[i],3)/J(CHF_AUTOIX[i])

            Clight(CHF_AUTOIX[i],0) = C0*sqrt( dq1dx1**2 + dq1dx2**2 )
            Clight(CHF_AUTOIX[i],1) = C0*sqrt( dq2dx1**2 + dq2dx2**2 )

         endif

      CHF_ENDDO

      return
      end

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c    RETURN SQUARE OF EACH ROW OF METRIC TENSOR NT

      subroutine mag_nt_row_sq(
     &     CHF_BOX[gridbox],
     &     CHF_CONST_FRA[N],
     &     CHF_FRA[NTmagRowSq]
     &     )

c     local variables
      integer CHF_AUTODECL[i]
      double precision norm0, norm1, norm2

      CHF_AUTOMULTIDO[gridbox;i]

      if (CH_SPACEDIM==3) then

        norm0  = N(CHF_AUTOIX[i],0)**2 + N(CHF_AUTOIX[i],3)**2 + N(CHF_AUTOIX[i],6)**2
        norm1  = N(CHF_AUTOIX[i],1)**2 + N(CHF_AUTOIX[i],4)**2 + N(CHF_AUTOIX[i],7)**2
        norm2  = N(CHF_AUTOIX[i],2)**2 + N(CHF_AUTOIX[i],5)**2 + N(CHF_AUTOIX[i],8)**2
        NTmagRowSq(CHF_AUTOIX[i],0) = norm0
        NTmagRowSq(CHF_AUTOIX[i],1) = norm1
        NTmagRowSq(CHF_AUTOIX[i],2) = norm2

      else 

        norm0  = N(CHF_AUTOIX[i],0)**2 + N(CHF_AUTOIX[i],2)**2
        norm1  = N(CHF_AUTOIX[i],1)**2 + N(CHF_AUTOIX[i],3)**2
        NTmagRowSq(CHF_AUTOIX[i],0) = norm0
        NTmagRowSq(CHF_AUTOIX[i],1) = norm1

      endif

      CHF_ENDDO

      return
      end

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c    COMPUTE VISCOSITY ENERGY FLUX

      subroutine eval_visc_energy_flux(
     &     CHF_BOX[gridbox],
     &     CHF_CONST_FRA[Vel],
     &     CHF_CONST_FRA[Pix],
     &     CHF_CONST_FRA[Piy],
     &     CHF_FRA[UPi]
     &     )

c     local variables
      integer CHF_AUTODECL[i]
      double precision Vx0, Vy0

      CHF_AUTOMULTIDO[gridbox;i]

      if (CH_SPACEDIM==3) then

      else

        Vx0  = Vel(CHF_AUTOIX[i],0)
        Vy0  = Vel(CHF_AUTOIX[i],1)

        UPi(CHF_AUTOIX[i],0) = Vx0*Pix(CHF_AUTOIX[i],0) + Vy0*Pix(CHF_AUTOIX[i],1)
        UPi(CHF_AUTOIX[i],1) = Vx0*Piy(CHF_AUTOIX[i],0) + Vy0*Piy(CHF_AUTOIX[i],1)

      endif

      CHF_ENDDO

      return
      end

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c    COMPUTE DOT PRODUCT

      subroutine eval_dot_product(
     &     CHF_BOX[gridbox],
     &     CHF_CONST_FRA[A],
     &     CHF_CONST_FRA[B],
     &     CHF_FRA1[C]
     &     )

c     local variables
      integer CHF_AUTODECL[i], m
      double precision sum

      CHF_AUTOMULTIDO[gridbox;i]

         sum = zero
         do m=0, (CH_SPACEDIM-1)
            sum = sum + A(CHF_AUTOIX[i],m)*B(CHF_AUTOIX[i],m)
         enddo
         C(CHF_AUTOIX[i]) = sum

      CHF_ENDDO

      return
      end

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c    COMPUTE DOT PRODUCT

      subroutine eval_cross_product(
     &     CHF_BOX[cellbox],
     &     CHF_CONST_FRA[A],
     &     CHF_CONST_FRA[B],
     &     CHF_FRA[C]
     &     )

c     local variables
      integer CHF_AUTODECL[i], dir0, dir1, dir2

      CHF_AUTOMULTIDO[cellbox;i]

         do dir0=0, (CH_SPACEDIM-1)
            dir1 = dir0+1 
            dir2 = dir0+2 
            dir1 = mod(dir1,CH_SPACEDIM)
            dir2 = mod(dir2,CH_SPACEDIM)
            C(CHF_AUTOIX[i],dir0) = A(CHF_AUTOIX[i],dir1)*B(CHF_AUTOIX[i],dir2)
     &                            - A(CHF_AUTOIX[i],dir2)*B(CHF_AUTOIX[i],dir1)
         enddo

      CHF_ENDDO

      return
      end

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c    COMPUTE CELL CENTER FLUXES

      subroutine cell_center_fluxes(
     &     CHF_BOX[gridbox],
     &     CHF_CONST_FRA1[eneDen],
     &     CHF_CONST_FRA[momDen],
     &     CHF_CONST_FRA[V],
     &     CHF_CONST_FRA1[P],
     &     CHF_FRA[rhoFlux],
     &     CHF_FRA[mxFlux],
     &     CHF_FRA[myFlux],
     &     CHF_FRA[mzFlux],
     &     CHF_FRA[enFlux]
     &     )

c     local variables
      integer n, CHF_AUTODECL[i]
      double precision norm0, norm1, norm2
      double precision Ptot

      do n=0, (CH_SPACEDIM-1)
      
         CHF_AUTOMULTIDO[gridbox;i]
   
            Ptot = P(CHF_AUTOIX[i])       
 
            rhoFlux(CHF_AUTOIX[i],n) = momDen(CHF_AUTOIX[i],n)
            mxFlux(CHF_AUTOIX[i],n) = momDen(CHF_AUTOIX[i],0)*V(CHF_AUTOIX[i],n)
            myFlux(CHF_AUTOIX[i],n) = momDen(CHF_AUTOIX[i],1)*V(CHF_AUTOIX[i],n)
 
            if (CH_SPACEDIM==3) then
               mzFlux(CHF_AUTOIX[i],n) = momDen(CHF_AUTOIX[i],2)*V(CHF_AUTOIX[i],n)
            endif
         
            if (n==0) then
               mxFlux(CHF_AUTOIX[i],n) = mxFlux(CHF_AUTOIX[i],n) + Ptot
            endif
            if (n==1) then
               myFlux(CHF_AUTOIX[i],n) = myFlux(CHF_AUTOIX[i],n) + Ptot
            endif
            if (n==2) then
               mzFlux(CHF_AUTOIX[i],n) = mzFlux(CHF_AUTOIX[i],n) + Ptot
            endif

            enFlux(CHF_AUTOIX[i],n) = (eneDen(CHF_AUTOIX[i]) + Ptot)
     &                                *V(CHF_AUTOIX[i],n)
            
         CHF_ENDDO

      enddo

      return
      end

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c    COMPUTE CELL CENTER FLUXES

      subroutine cell_center_fluxes_cgl(
     &     CHF_BOX[gridbox],
     &     CHF_CONST_FRA1[eneDenPerp],
     &     CHF_CONST_FRA1[eneDenPar],
     &     CHF_CONST_FRA[momDen],
     &     CHF_CONST_FRA[V],
     &     CHF_CONST_FRA1[Pperp],
     &     CHF_CONST_FRA1[Ppar],
     &     CHF_FRA[rhoFlux],
     &     CHF_FRA[mxFlux],
     &     CHF_FRA[myFlux],
     &     CHF_FRA[mzFlux],
     &     CHF_FRA[enPerpFlux],
     &     CHF_FRA[enParFlux]
     &     )

c     local variables
      integer n, CHF_AUTODECL[i]
      double precision norm0, norm1, norm2
      double precision Pperp0, Ppar0

      do n=0, (CH_SPACEDIM-1)
      
         CHF_AUTOMULTIDO[gridbox;i]
   
            Pperp0 = Pperp(CHF_AUTOIX[i])       
            Ppar0  = Ppar(CHF_AUTOIX[i])       
 
            rhoFlux(CHF_AUTOIX[i],n) = momDen(CHF_AUTOIX[i],n)
            mxFlux(CHF_AUTOIX[i],n) = momDen(CHF_AUTOIX[i],0)*V(CHF_AUTOIX[i],n)
            myFlux(CHF_AUTOIX[i],n) = momDen(CHF_AUTOIX[i],1)*V(CHF_AUTOIX[i],n)
 
            if (CH_SPACEDIM==3) then
               mzFlux(CHF_AUTOIX[i],n) = momDen(CHF_AUTOIX[i],2)*V(CHF_AUTOIX[i],n)
            endif
         
            if (n==0) then
               mxFlux(CHF_AUTOIX[i],n) = mxFlux(CHF_AUTOIX[i],n) + Pperp0
            endif
            if (n==1) then
               myFlux(CHF_AUTOIX[i],n) = myFlux(CHF_AUTOIX[i],n) + Pperp0
            endif
            if (n==2) then
               mzFlux(CHF_AUTOIX[i],n) = mzFlux(CHF_AUTOIX[i],n) + Ppar0
            endif

            enPerpFlux(CHF_AUTOIX[i],n) = eneDenPerp(CHF_AUTOIX[i])*V(CHF_AUTOIX[i],n)
            if (n<2) then
              enPerpFlux(CHF_AUTOIX[i],n) = enPerpFlux(CHF_AUTOIX[i],n) + Pperp0*V(CHF_AUTOIX[i],n)
            endif
            
            enParFlux(CHF_AUTOIX[i],n) = eneDenPar(CHF_AUTOIX[i])*V(CHF_AUTOIX[i],n)
            if (n==3) then
              enParFlux(CHF_AUTOIX[i],n) = enParFlux(CHF_AUTOIX[i],n) + Ppar0*V(CHF_AUTOIX[i],n)
            endif
            
         CHF_ENDDO

      enddo

      return
      end

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c    COMPUTE CELL CENTER FLUXES

      subroutine cell_center_fluxes_twotemp(
     &     CHF_BOX[gridbox],
     &     CHF_CONST_FRA1[eneDeni],
     &     CHF_CONST_FRA1[eneDene],
     &     CHF_CONST_FRA[momDen],
     &     CHF_CONST_FRA[V],
     &     CHF_CONST_FRA1[Pion],
     &     CHF_CONST_FRA1[Pele],
     &     CHF_FRA[rhoFlux],
     &     CHF_FRA[mxFlux],
     &     CHF_FRA[myFlux],
     &     CHF_FRA[mzFlux],
     &     CHF_FRA[enFluxi],
     &     CHF_FRA[enFluxe]
     &     )

c     local variables
      integer n, CHF_AUTODECL[i]
      double precision norm0, norm1, norm2
      double precision Pi0, Pe0, Ptot

      do n=0, (CH_SPACEDIM-1)
      
         CHF_AUTOMULTIDO[gridbox;i]
   
            Pi0 = Pion(CHF_AUTOIX[i])       
            Pe0 = Pele(CHF_AUTOIX[i])       
            Ptot = Pi0+Pe0  
 
            rhoFlux(CHF_AUTOIX[i],n) = momDen(CHF_AUTOIX[i],n)
            mxFlux(CHF_AUTOIX[i],n) = momDen(CHF_AUTOIX[i],0)*V(CHF_AUTOIX[i],n)
            myFlux(CHF_AUTOIX[i],n) = momDen(CHF_AUTOIX[i],1)*V(CHF_AUTOIX[i],n)
 
            if (CH_SPACEDIM==3) then
               mzFlux(CHF_AUTOIX[i],n) = momDen(CHF_AUTOIX[i],2)*V(CHF_AUTOIX[i],n)
            endif
         
            if (n==0) then
               mxFlux(CHF_AUTOIX[i],n) = mxFlux(CHF_AUTOIX[i],n) + Ptot
            endif
            if (n==1) then
               myFlux(CHF_AUTOIX[i],n) = myFlux(CHF_AUTOIX[i],n) + Ptot
            endif
            if (n==2) then
               mzFlux(CHF_AUTOIX[i],n) = mzFlux(CHF_AUTOIX[i],n) + Ptot
            endif

            enFluxi(CHF_AUTOIX[i],n) = (eneDeni(CHF_AUTOIX[i]) + Pi0)
     &                                *V(CHF_AUTOIX[i],n)
            
            enFluxe(CHF_AUTOIX[i],n) = (eneDene(CHF_AUTOIX[i]) + Pe0)
     &                                *V(CHF_AUTOIX[i],n)

         CHF_ENDDO

      enddo

      return
      end

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c    COMPUTE LAX FLUX SPLITTING

      subroutine lax_flux_splitting(
     &     CHF_BOX[gridbox],
     &     CHF_FRA[fluxL],
     &     CHF_FRA[fluxR],
     &     CHF_CONST_FRA[flux],
     &     CHF_CONST_FRA[C],
     &     CHF_CONST_FRA1[Jf]
     &     )

c     local variables
      integer n, CHF_AUTODECL[i]

      do n=0, (CHF_NCOMP[flux]-1)
      
         CHF_AUTOMULTIDO[gridbox;i]
          
            fluxL(CHF_AUTOIX[i],n) = 0.5*(flux(CHF_AUTOIX[i],n) - C(CHF_AUTOIX[i],n)*Jf(CHF_AUTOIX[i]))
            fluxR(CHF_AUTOIX[i],n) = 0.5*(flux(CHF_AUTOIX[i],n) + C(CHF_AUTOIX[i],n)*Jf(CHF_AUTOIX[i]))
 
         CHF_ENDDO

      enddo

      return
      end

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c    CONVERT FLUX FROM PHYSICAL TO MAPPED

      subroutine convert_to_mapped(
     &     CHF_BOX[gridbox],
     &     CHF_CONST_FRA[physFlux],
     &     CHF_CONST_FRA[N],
     &     CHF_CONST_INT[Dims],
     &     CHF_FRA[mappedFlux]
     &     )

c     local variables
      integer CHF_AUTODECL[i]
      double precision mapped0, mapped1, mapped2

      CHF_AUTOMULTIDO[gridbox;i]
      
c      m = 0
c      do row = 0, CH_SPACEDIM-1
c         sum = zero
c         do col = 0, CH_SPACEDIM-1
c            sum = sum + N(CHF_AUTOIX[i],row+m*CH_SPACEDIM)*physFlux(CHF_AUTOIX[i],col)
c            m = m + 1
c         enddo
c         mappedFlux(CHF_AUTOIX[i],row) = sum
c      enddo

      if (Dims==3) then
        
        mapped0  = N(CHF_AUTOIX[i],0)*physFlux(CHF_AUTOIX[i],0) 
     &           + N(CHF_AUTOIX[i],3)*physFlux(CHF_AUTOIX[i],1)
     &           + N(CHF_AUTOIX[i],6)*physFlux(CHF_AUTOIX[i],2)
        mapped1  = N(CHF_AUTOIX[i],1)*physFlux(CHF_AUTOIX[i],0) 
     &           + N(CHF_AUTOIX[i],4)*physFlux(CHF_AUTOIX[i],1)
     &           + N(CHF_AUTOIX[i],7)*physFlux(CHF_AUTOIX[i],2)
        mapped2  = N(CHF_AUTOIX[i],2)*physFlux(CHF_AUTOIX[i],0) 
     &           + N(CHF_AUTOIX[i],5)*physFlux(CHF_AUTOIX[i],1)
     &           + N(CHF_AUTOIX[i],8)*physFlux(CHF_AUTOIX[i],2)
        
        mappedFlux(CHF_AUTOIX[i],0) = mapped0
        mappedFlux(CHF_AUTOIX[i],1) = mapped1
        mappedFlux(CHF_AUTOIX[i],2) = mapped2

      else 

        mapped0  = N(CHF_AUTOIX[i],0)*physFlux(CHF_AUTOIX[i],0) 
     &           + N(CHF_AUTOIX[i],2)*physFlux(CHF_AUTOIX[i],1)
        mapped1  = N(CHF_AUTOIX[i],1)*physFlux(CHF_AUTOIX[i],0) 
     &           + N(CHF_AUTOIX[i],3)*physFlux(CHF_AUTOIX[i],1)

        mappedFlux(CHF_AUTOIX[i],0) = mapped0
        mappedFlux(CHF_AUTOIX[i],1) = mapped1

      endif

      CHF_ENDDO

      return
      end

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

