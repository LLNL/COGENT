      subroutine phase_block_project(
     &     CHF_BOX[box],
     &     CHF_CONST_FRA[vec_src],
     &     CHF_FRA[vec_dst],
     & )

c     local variables
      integer CHF_AUTODECL[i], comp, ncomp, kk
      double precision dotprod

      ncomp = CHF_NCOMP[vec_src]
      kk = CHF_LBOUND[vec_src;2]

      CHF_AUTOMULTIDO[box;i]

#if CH_SPACEDIM==5
        kk = i2
#endif

        dotprod = zero
        do comp = 0, ncomp - 1
          dotprod = dotprod + vec_src(CHF_IX[i0;i1;kk;CHF_LBOUND[vec_src;3];CHF_LBOUND[vec_src;4]],comp)
     &                      * vec_dst(CHF_AUTOIX[i],comp)
        enddo     
 
        do comp = 0, ncomp - 1
          vec_dst(CHF_AUTOIX[i],comp) = dotprod * vec_src(CHF_IX[i0;i1;kk;CHF_LBOUND[vec_src;3];CHF_LBOUND[vec_src;4]],comp)
        enddo     

      CHF_ENDDO

      return
      end


      subroutine phase_block_psitheta_projections(
     &     CHF_BOX[box],
     &     CHF_CONST_FRA[vec_psi],
     &     CHF_CONST_FRA[vec_theta],
     &     CHF_FRA[vec_dst],
     & )

c     local variables
      integer CHF_AUTODECL[i], comp, kk
      double precision dotprod_psi, dotprod_theta 

      kk = CHF_LBOUND[vec_psi;2]
      CHF_AUTOMULTIDO[box;i]

#if CH_SPACEDIM==5
        kk = i2
#endif

        dotprod_psi = zero
        do comp = 0, 1
          dotprod_psi = dotprod_psi + vec_psi(CHF_IX[i0;i1;kk;CHF_LBOUND[vec_psi;3];CHF_LBOUND[vec_psi;4]],comp)
     &                         * vec_dst(CHF_AUTOIX[i],comp)
        enddo     

        dotprod_theta = zero
        do comp = 0, 1
          dotprod_theta = dotprod_theta + vec_theta(CHF_IX[i0;i1;kk;CHF_LBOUND[vec_theta;3];CHF_LBOUND[vec_theta;4]],comp)
     &                         * vec_dst(CHF_AUTOIX[i],comp)
        enddo     
 
        vec_dst(CHF_AUTOIX[i],0) = dotprod_psi
        vec_dst(CHF_AUTOIX[i],1) = dotprod_theta

      CHF_ENDDO

      return
      end


      subroutine phase_block_gradf_factor(
     &     CHF_BOX[box],
     &     CHF_CONST_FRA1[vec_src],
     &     CHF_FRA1[vec_dst],
     & )

c     local variables
      integer CHF_AUTODECL[i], kk

      kk = CHF_LBOUND[vec_src;2]
      CHF_AUTOMULTIDO[box;i]

#if CH_SPACEDIM==5
        kk = i2
#endif
        vec_dst(CHF_AUTOIX[i]) = vec_src(CHF_IX[i0;i1;kk;CHF_LBOUND[vec_src;3];CHF_LBOUND[vec_src;4]])

      CHF_ENDDO

      return
      end

      subroutine mult_injected_data(
     &     CHF_BOX[box],
     &     CHF_CONST_FRA1[data_inj],
     &     CHF_FRA[result],
     & )

c     local variables
      integer CHF_AUTODECL[i], kk, n
      double precision injected_data

      kk = CHF_LBOUND[data_inj;2]
      CHF_AUTOMULTIDO[box;i]

#if CH_SPACEDIM==5
        kk = i2
#endif
        injected_data = data_inj(CHF_IX[i0;i1;kk;CHF_LBOUND[data_inj;3];CHF_LBOUND[data_inj;4]]);

        do n = 0, CHF_NCOMP[result]-1
          result(CHF_AUTOIX[i],n) = result(CHF_AUTOIX[i],n) * injected_data
        enddo

      CHF_ENDDO

      return
      end

      subroutine divide_injected_data(
     &     CHF_BOX[box],
     &     CHF_CONST_FRA1[data_inj],
     &     CHF_FRA[result],
     & )

c     local variables
      integer CHF_AUTODECL[i], kk, n
      double precision injected_data

      kk = CHF_LBOUND[data_inj;2]
      CHF_AUTOMULTIDO[box;i]

#if CH_SPACEDIM==5
        kk = i2
#endif
        injected_data = data_inj(CHF_IX[i0;i1;kk;CHF_LBOUND[data_inj;3];CHF_LBOUND[data_inj;4]]);

        do n = 0, CHF_NCOMP[result]-1
          result(CHF_AUTOIX[i],n) = result(CHF_AUTOIX[i],n) / injected_data
        enddo

      CHF_ENDDO

      return
      end
