C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"
#include "LGintegrator.H"

        subroutine GAUSSIAN1DSETF(
     &    CHF_REAL[ausmallPressure],
     &    CHF_CONST_REAL[augamma],
     &    CHF_CONST_REAL[auambientDensity],
     &    CHF_CONST_REAL[audeltaDensity],
     &    CHF_CONST_INT[aupressure],
     &    CHF_CONST_REALVECT[aucenter],
     &    CHF_CONST_REAL[auradmax],
     &    CHF_CONST_REALVECT[auvelocity],
     &    CHF_CONST_REAL[auartvisc])

#include "GaussianCommon.fh"
#include "EosCommon.fh"

        real_t r0,p0,umag

        gamma = augamma

        ambientdensity = auambientDensity
        deltadensity = audeltaDensity

        pressure = aupressure

        CHF_DTERM[
        centerx = aucenter(0);
        centery = aucenter(1);
        centerz = aucenter(2)]

        radmax = auradmax

        CHF_DTERM[
        velx = auvelocity(0);
        vely = zero ;
        velz = zero ]

        artvisc = auartvisc

        r0 = ambientdensity
        p0 = one

        umag = sqrt(gamma*p0/r0)

        smallr = small*r0
        smallu = small*umag
        smallp = small*r0*half*umag*umag

        ausmallPressure = smallp

        return
        end

        subroutine GAUSSIAN1DINITF(
     &    CHF_FRA[U],
     &    CHF_CONST_REAL[dx],
     &    CHF_BOX[box])

#include "GaussianCommon.fh"
#include "EosCommon.fh"

        real_t ke,r0,p0,r,p
        integer CHF_DDECL[i;j;k]
        real_t CHF_DDECL[xcenter;ycenter;zcenter]
        real_t CHF_DDECL[uu;vv;ww]
        real_t CHF_DDECL[x;y;z]
        real_t rad0sqr,radsqr

        CHF_DTERM[
        xcenter = centerx;
        ycenter = centery;
        zcenter = centerz]

        rad0sqr = radmax*radmax

        r0 = ambientdensity
        p0 = one

        CHF_DTERM[
        uu = velx;
        vv = zero;
        ww = zero]

!        ke = half*(CHF_DTERM[uu*uu; + vv*vv; + ww*ww])
        ke = half*(uu*uu)

        CHF_MULTIDO[box;i;j;k]
          CHF_DTERM[
          x = (i + half)*dx - xcenter;
          y = (j + half)*dx - ycenter;
          z = (k + half)*dx - zcenter]

!          radsqr = CHF_DTERM[x*x; + y*y; + z*z]
          radsqr = x*x

          r = r0 + deltadensity * exp(-(radsqr/rad0sqr))
          if (pressure .eq. 0) then
            p = (r/r0)**gamma * p0
          else
            p = p0
          endif

          U(CHF_IX[i;j;k],URHO) = r

          CHF_DTERM[
          U(CHF_IX[i;j;k],UMOMX) = uu*r;
          U(CHF_IX[i;j;k],UMOMY) = zero;
          U(CHF_IX[i;j;k],UMOMZ) = zero]

          U(CHF_IX[i;j;k],UENG) = p/(gamma - one) + r*ke
        CHF_ENDDO

        return
        end
