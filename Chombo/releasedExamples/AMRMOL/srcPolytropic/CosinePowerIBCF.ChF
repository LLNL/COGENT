C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"
#include "LGintegrator.H"

        subroutine COSINEPOWERSETF(
     &    CHF_REAL[ausmallPressure],
     &    CHF_CONST_REAL[augamma],
     &    CHF_CONST_REAL[auambientDensity],
     &    CHF_CONST_REAL[audeltaDensity],
     &    CHF_CONST_INT[aupressure],
     &    CHF_CONST_REALVECT[aucenter],
     &    CHF_CONST_REAL[auradmax],
     &    CHF_CONST_INT[aupower],
     &    CHF_CONST_REALVECT[auvelocity],
     &    CHF_CONST_REAL[auartvisc])

#include "CosinePowerCommon.fh"
#include "EosCommon.fh"

        real_t r0,p0,umag

        gamma = augamma

        ambientdensity = auambientDensity
        deltadensity = audeltaDensity

        pressure = aupressure

        CHF_DTERM[
        centerx = aucenter(0);
        centery = aucenter(1);
        centerz = aucenter(2)]

        radmax = auradmax
        power = aupower

        CHF_DTERM[
        velx = auvelocity(0);
        vely = auvelocity(1);
        velz = auvelocity(2)]

        artvisc = auartvisc

        r0 = ambientdensity
        p0 = one

        umag = sqrt(gamma*p0/r0)

        smallr = small*r0
        smallu = small*umag
        smallp = small*r0*half*umag*umag

        ausmallPressure = smallp

        return
        end

        subroutine COSINEPOWERINITF(
     &    CHF_FRA[U],
     &    CHF_CONST_REAL[dx],
     &    CHF_BOX[box])
#include "CosinePowerCommon.fh"
#include "EosCommon.fh"

        real_t ke,r0,p0,r,p
        integer CHF_DDECL[i;j;k]
        real_t CHF_DDECL[xcenter;ycenter;zcenter]
        real_t CHF_DDECL[uu;vv;ww]
        real_t CHF_DDECL[x;y;z]
        real_t radsqr, radrat

        CHF_DTERM[
        xcenter = centerx;
        ycenter = centery;
        zcenter = centerz]

        r0 = ambientdensity
        p0 = one

        CHF_DTERM[
        uu = velx;
        vv = vely;
        ww = velz]

        ke = half*(CHF_DTERM[uu*uu; + vv*vv; + ww*ww])

        CHF_MULTIDO[box;i;j;k]
          CHF_DTERM[
          x = (i + half)*dx - xcenter;
          y = (j + half)*dx - ycenter;
          z = (k + half)*dx - zcenter]

          radsqr = CHF_DTERM[x*x; + y*y; + z*z]

!     Smoothing.  Multiply deltadensity by this.
!          smoo = smoothened(sqrt(radsqr) / radmax)
!          r = r0 + deltadensity * exp(-(radsqr/sz2)) * smoo

          radrat = sqrt(radsqr) / radmax
          if (radrat .ge. one) then
             r = r0
          else
             r = r0 + deltadensity * (cos(Pi*half*radrat)**power)
          endif

          if (pressure .eq. 0) then
            p = (r/r0)**gamma * p0
          else
            p = p0
          endif

          U(CHF_IX[i;j;k],URHO) = r

          CHF_DTERM[
          U(CHF_IX[i;j;k],UMOMX) = uu*r;
          U(CHF_IX[i;j;k],UMOMY) = vv*r;
          U(CHF_IX[i;j;k],UMOMZ) = ww*r]

          U(CHF_IX[i;j;k],UENG) = p/(gamma - one) + r*ke
        CHF_ENDDO

        return
        end
