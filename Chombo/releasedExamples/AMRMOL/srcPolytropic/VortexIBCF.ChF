C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"
#include "LGintegrator.H"

        subroutine VORTEXSETF(
     &    CHF_REAL[ausmallPressure],
     &    CHF_CONST_REAL[augamma],
     &    CHF_CONST_REAL[auambientDensity],
     &    CHF_CONST_INT[aupressure],
     &    CHF_CONST_VR[aucenterCoords],
     &    CHF_CONST_VR[auradius],
     &    CHF_CONST_VR[austrength],
     &    CHF_CONST_REAL[auartvisc])

#include "VortexCommon.fh"
#include "EosCommon.fh"

        real_t r0,p0,umag
c        real_t radius, strength
        integer ivort, base

        gamma = augamma

        ambientdensity = auambientDensity

        pressure = aupressure

        artvisc = auartvisc

        nvorts = CHF_UBOUND[auradius] + 1
        do ivort = 1, nvorts
           base = (ivort - 1) * CH_SPACEDIM
           CHF_DTERM[
           centerx(ivort) = aucenterCoords(base + 0);
           centery(ivort) = aucenterCoords(base + 1);
           centerz(ivort) = aucenterCoords(base + 2)]

           radius(ivort) = auradius(ivort-1)
           strength(ivort) = austrength(ivort-1)
        enddo

        r0 = ambientdensity
        p0 = one

        umag = sqrt(gamma*p0/r0)

        smallr = small*r0
        smallu = small*umag
        smallp = small*r0*half*umag*umag

        ausmallPressure = smallp

        return
        end

        subroutine VORTEXINITF(
     &    CHF_FRA[U],
     &    CHF_CONST_REAL[dx],
     &    CHF_BOX[box])

#include "VortexCommon.fh"
#include "EosCommon.fh"

        real_t ke,rho0,p0,rho,p,kemax
        integer CHF_DDECL[i;j;k]
        real_t CHF_DDECL[xcenter;ycenter;zcenter]
        real_t CHF_DDECL[uu;vv;ww]
        real_t CHF_DDECL[x;y;z]
        real_t radsqr, rad, radrat, utheta, rvort, svort
        integer ivort

        rho0 = ambientdensity
        p0 = one

        p = zero
        do ivort = 1, nvorts
           rvort = radius(ivort)
           svort = strength(ivort)
           rho = rho0

           kemax = half * rho * ((one + fourth)*svort/rvort)**2
           p = p + ten * kemax
        enddo

        CHF_MULTIDO[box;i;j;k]
           CHF_DTERM[
           uu = zero ;
           vv = zero ;
           ww = zero ]

           do ivort = 1, nvorts
              CHF_DTERM[
              xcenter = centerx(ivort) ;
              ycenter = centery(ivort) ;
              zcenter = centerz(ivort) ]

              rvort = radius(ivort)
              svort = strength(ivort)

              CHF_DTERM[
              x = (i*one + half)*dx - xcenter ;
              y = (j*one + half)*dx - ycenter ;
              z = (k*one + half)*dx - zcenter ]

              radsqr = CHF_DTERM[x*x; + y*y; + z*z]
              rad = sqrt(radsqr)

              if (rad .lt. rvort) then
                 radrat = rad / rvort
                 utheta = svort * radrat * (ten/three +
     &                radrat*radrat * (-five + radrat*eight/three))
     &                / rvort
              else
                 utheta = svort / rad
              endif

#if CH_SPACEDIM>=2
              CHF_DTERM[
              uu = uu - (y / rad) * utheta ;
              vv = vv + (x / rad) * utheta ;
              ww = ww + zero ]
#endif

c              if (pressure .eq. 0) then
c                 p = (rho/rho0)**gamma * p0
c              else
c                 p = p0
c              endif

           enddo
           ke = half*(CHF_DTERM[uu*uu; + vv*vv; + ww*ww])

           U(CHF_IX[i;j;k],URHO) = rho

           CHF_DTERM[
           U(CHF_IX[i;j;k],UMOMX) = uu*rho ;
           U(CHF_IX[i;j;k],UMOMY) = vv*rho ;
           U(CHF_IX[i;j;k],UMOMZ) = ww*rho ]

           U(CHF_IX[i;j;k],UENG) = p/(gamma - one) + rho*ke
        CHF_ENDDO

        return
        end
