C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"
#include "LGintegrator.H"

        subroutine GAUSSIANMAPPEDINITF(
     &     CHF_FRA[U],
     &     CHF_CONST_FRA[coords],
     &     CHF_BOX[box],
     &     CHF_CONST_REAL[time])

#include "GaussianCommon.fh"
#include "SmoothCommon.fh"
#include "EosCommon.fh"

        real_t ke,r0,p0,r,p
        integer CHF_DDECL[i;j;k]
        real_t CHF_DDECL[xcenter;ycenter;zcenter]
        real_t CHF_DDECL[uu;vv;ww]
        real_t CHF_DDECL[x;y;z]
        real_t rad0sqr,radsqr
        real_t smoo
        real_t smoothened
        external smoothened

!     initial velocity
        CHF_DTERM[
        uu = velx;
        vv = vely;
        ww = velz]

        CHF_DTERM[
        xcenter = centerx + uu*time;
        ycenter = centery + vv*time;
        zcenter = centerz + ww*time]
!     Assume a periodic domain from 0 -> 1
        CHF_DTERM[
        xcenter = xcenter - floor(xcenter);
        ycenter = ycenter - floor(ycenter);
        zcenter = zcenter - floor(zcenter)]

        rad0sqr = size*size

        r0 = ambientdensity
        p0 = one

        ke = half*(CHF_DTERM[uu*uu; + vv*vv; + ww*ww])

        CHF_MULTIDO[box;i;j;k]
          CHF_DTERM[
          x = coords(CHF_IX[i;j;k], 0) - xcenter ;
          y = coords(CHF_IX[i;j;k], 1) - ycenter ;
          z = coords(CHF_IX[i;j;k], 2) - zcenter ]

          radsqr = CHF_DTERM[x*x; + y*y; + z*z]

!     Smoothing.  Multiply deltadensity by this.
!          smoo = CHF_DTERM[
!     &         smoothened(x / widthx) ;
!     &         * smoothened(y / widthy) ;
!     &         * smoothened(z / widthz) ]
          smoo = smoothened(sqrt(radsqr) / radmax)
          r = r0 + deltadensity * exp(-(radsqr/rad0sqr)) * smoo
          if (pressure .eq. 0) then
            p = (r/r0)**gamma * p0
          else
            p = p0
          endif

          U(CHF_IX[i;j;k],URHO) = r

          CHF_DTERM[
          U(CHF_IX[i;j;k],UMOMX) = uu*r;
          U(CHF_IX[i;j;k],UMOMY) = vv*r;
          U(CHF_IX[i;j;k],UMOMZ) = ww*r]

          U(CHF_IX[i;j;k],UENG) = p/(gamma - one) + r*ke
        CHF_ENDDO

        return
        end
