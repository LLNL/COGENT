C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"
#include "EBLGIntegrator.H"
ccccccccccccccccccccc
ccccccccccccccccccccc
        subroutine getpostshockvel(
     &    chf_real[aupostshockvel])
#include "EBPlanarShockCommon.fh"
#include "EBEOSCommon.fh"

        aupostshockvel = abs(postshockvel)


        return
        end
        subroutine getpostshocktemp(
     &    chf_real[aupostshocktemp])
#include "EBPlanarShockCommon.fh"
#include "EBEOSCommon.fh"

        aupostshocktemp = abs(postshocktemp)


        return
        end

ccccccccccccccccccccccccccccccc
cccccccccccccccccccccccccccccc
      subroutine getshocklocx(
     $     chf_const_real[aushockloc],
     $     chf_const_real[time])
#include "EBPlanarShockCommon.fh"
#include "EBEOSCommon.fh"
      
      real_t soundspeed

      soundspeed = sqrt(gamma*preshockpress/preshockdense)
      
      aushockloc = shockcenter + shockms*soundspeed*time

      return 
      end

        subroutine setplanarshock(
     &    chf_const_real[aucv],
     &    chf_const_real[augamma],
     &    chf_const_real[aums],
     &    chf_const_real[aucenter],
     &    chf_const_real[aupreshockpress],
     &    chf_const_real[aupreshockdense],
     &    chf_const_real[aubackpressure],
     &    chf_const_int[aushocknorm],
     &    chf_const_int[aushockback])

#include "EBPlanarShockCommon.fh"
#include "EBEOSCommon.fh"

        real_t  preshockc, preshocktemp,tdenom, tnumer, postshockmac
        real_t p0,r0,p,r,umag,ke,ms, internal, cvtemp, specificheat

        cvps = aucv
        specificheat = cvps
        gamma = augamma
        shockms = aums
        shockcenter = aucenter
        shocknorm   = aushocknorm


        preshockpress  = aupreshockpress
        preshockdense  = aupreshockdense
        backpressure = aubackpressure
        preshockc = sqrt(gamma*preshockpress/preshockdense)
        preshocktemp = gamma*preshockpress/preshockdense

        tnumer = ((2*gamma*(shockms**2)) - (gamma-1))*((gamma-1)*(shockms**2) + 2)
        tdenom = ((gamma+1)**2)
        postshocktemp = preshocktemp*tnumer/tdenom

        tnumer = (2.*gamma*(shockms**2) - (gamma-one))
        tdenom = gamma+1
        postshockpress =preshockpress*tnumer/tdenom

        
        tnumer =  ((gamma+1)*shockms**2)
        tdenom = ((gamma-1)*shockms**2 + 2)
        postshockdense = preshockdense*tnumer/tdenom

        postshockdense = preshockdense*tnumer/tdenom


        postshockvel = shockms*preshockc*(1. - preshockdense/postshockdense)

        shockbackward = (aushockback.eq.1)

        if(shockbackward) then
           postshockvel = -postshockvel
        endif

        internal = preshockpress/((gamma-one)*preshockdense)
        cvtemp = internal
        preshocktemp = internal/specificheat

        internal = postshockpress/((gamma-one)*postshockdense)
        cvtemp = internal
        postshocktemp = internal/specificheat

c     set levels of smallnitude
        small = 1.0e-8
        smallr = small*preshockdense
        smallu = small*postshockvel
        smallp = small*preshockdense*half*postshockvel*postshockvel

        return
        end
cccccccccccccccccccc
cccccccccccccccccccc

        subroutine planarshockinit(
     &    chf_fra[u],
     &    chf_const_real[dx],
     &    chf_box[box])

        integer chf_ddecl[i;j;k]
        integer iv(0:CH_SPACEDIM-1)
        real_t density, energy, momentum(0:CH_SPACEDIM-1)

        chf_multido[box;i;j;k]

        chf_dterm[
        iv(0) = i;
        iv(1) = j;
        iv(2) = k]

        call pointplanarshockinit(density, momentum, energy, iv, dx)

        chf_dterm[
        u(chf_ix[i;j;k],CMOMX) = momentum(0);
        u(chf_ix[i;j;k],CMOMY) = momentum(1);
        u(chf_ix[i;j;k],CMOMZ) = momentum(2)]

        u(chf_ix[i;j;k],CRHO) = density
        u(chf_ix[i;j;k],CENG) = energy

        chf_enddo

        return
        end
ccccccccccccccccccccc
ccccccccccccccccccccc
        subroutine pointplanarshockinit(
     &    chf_real[density],
     &    chf_realvect[momentum],
     &    chf_real[energy],
     &    chf_const_intvect[iv],
     &    chf_const_real[dx])

        real_t xval, ke, ri
        integer idir
        integer tshockn
        real_t tpostshockvel, tpreshockpress, tpostshockpress
        real_t tpreshockdense, tpostshockdense, tshockms, tshockcenter
#include "EBPlanarShockCommon.fh"
#include "EBEOSCommon.fh"

c     debug
        tshockn = shocknorm
        tpostshockvel = postshockvel
        tpostshockpress=postshockpress
        tpreshockpress=preshockpress
        tpostshockdense=postshockdense
        tpreshockdense=preshockdense
        tshockms = shockms
        tshockcenter = shockcenter
c     end debug
        ri = iv(shocknorm)

        xval = (ri + 0.5)*dx

c     momentum only nonzero in one component
c     fixed in postschock stuff
        do idir = 0, CH_SPACEDIM-1
           momentum(idir) = zero
        enddo

        if(((.not.shockbackward).and.(xval .gt. shockcenter)).or.
     &     ((     shockbackward).and.(xval .le. shockcenter))) then
c     on pre-shock side
           density = preshockdense
c     momentum stays zero
           energy  = preshockpress/(gamma-one)
        else
c     on post-shock side
           density = postshockdense
c     momentum only nonzero in one component
           momentum(shocknorm) = density*postshockvel
           ke = half*density*postshockvel*postshockvel
           energy  = postshockpress/(gamma-one) + ke
        endif

        return
        end
