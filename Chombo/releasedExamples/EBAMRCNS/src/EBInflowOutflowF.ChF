C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"
#include "EBLGIntegrator.H"

        subroutine setinflowoutflow(
     &    chf_const_real[aucv],
     &    chf_const_real[augamma],
     &    chf_const_real[autempinflow],
     &    chf_const_real[autempinterior],
     &    chf_const_real[aumachinflow],
     &    chf_const_real[aupresinflow],
     &    chf_const_real[aupresinterior])

#include "EBInflowOutflowCommon.fh"
#include "EBEOSCommon.fh"

        real_t  ke

        cvinout = aucv
        
        gamma = augamma
        tempinflow   = autempinflow
        tempinterior = autempinterior
        machinflow   = aumachinflow
        presinflow   = aupresinflow
        presinterior = aupresinterior

        rhointerior = presinterior/(cvinout*(gamma-1)*tempinterior)
        rhoinflow   = presinflow  /(cvinout*(gamma-1)*tempinflow  )
        enginterior = rhointerior*cvinout*tempinterior
        cinflow = sqrt(gamma*presinflow/rhoinflow)
        velinflow = machinflow*cinflow
        ke = half*rhoinflow*velinflow*velinflow
        enginflow   = rhointerior*cvinout*tempinflow + ke
        backpressure = presinterior

c     set levels of smallnitude
        small = 1.0e-8
        smallr = small*rhointerior
        smallu = small*velinflow
        smallp = small*presinterior

        return
        end
cccccccccccccccccccc
cccccccccccccccccccc

        subroutine ebioinflowoutflowinit(
     &    chf_fra[u],
     &    chf_const_real[dx],
     &    chf_box[box])

        integer chf_ddecl[i;j;k]
        integer iv(0:CH_SPACEDIM-1)
        real_t density, energy, momentum(0:CH_SPACEDIM-1)

        chf_multido[box;i;j;k]

        chf_dterm[
        iv(0) = i;
        iv(1) = j;
        iv(2) = k]

        call pointebioinflowoutflowinit(density, momentum, energy, iv, dx)

        chf_dterm[
        u(chf_ix[i;j;k],CMOMX) = momentum(0);
        u(chf_ix[i;j;k],CMOMY) = momentum(1);
        u(chf_ix[i;j;k],CMOMZ) = momentum(2)]

        u(chf_ix[i;j;k],CRHO) = density
        u(chf_ix[i;j;k],CENG) = energy

        chf_enddo

        return
        end
ccccccccccccccccccccc
ccccccccccccccccccccc
        subroutine pointebioinflowoutflowinit(
     &    chf_real[density],
     &    chf_realvect[momentum],
     &    chf_real[energy],
     &    chf_const_intvect[iv],
     &    chf_const_real[dx])

        integer idir
#include "EBInflowOutflowCommon.fh"
#include "EBEOSCommon.fh"

        density = rhointerior
        energy  = enginterior
c     momentum only nonzero at inflow
        do idir = 0, CH_SPACEDIM-1
           momentum(idir) = zero
        enddo

        return
        end

cccccccccccccccccccccccccccccc outflow bcs
      subroutine EBIOOUTFLOWBC(
     &     CHF_FRA[F],
     &     CHF_CONST_FRA[Wextrap],
     &     CHF_CONST_INT[lohisign],
     &     CHF_CONST_INT[facedir],
     &     CHF_BOX[box])

      integer chf_ddecl[i; j; k]
      real_t    veloc(0:CH_SPACEDIM-1)
      real_t   fluxvec(0:FNUM-1)
      real_t   prim(0:QNUM-1)
      real_t press, dense,  entropy, internal, cvtemp, sound
      integer qnum, fnum, idir,sdim
#include "EBEOSCommon.fh"

      qnum = QNUM-1
      fnum = FNUM-1
      sdim = CH_SPACEDIM

      CHF_MULTIDO[box;i;j;k]

      press   = Wextrap(CHF_IX[i;j;k],QPRES)
      dense   = Wextrap(CHF_IX[i;j;k],QRHO)
c     these two do not affect the calculation
      sound = Wextrap(CHF_IX[i;j;k],QC)
      entropy = Wextrap(CHF_IX[i;j;k],QENTR)
      internal = Wextrap(CHF_IX[i;j;k],QINTERN)
      cvtemp = internal/dense
      do idir = 0, sdim-1
         veloc(idir) = Wextrap(CHF_IX[i;j;k],QVELX + idir)
      enddo

      call fillprimitivevector(prim, qnum, dense, press, veloc,  entropy, internal, cvtemp, sound)

      call pointebiooutflowbc(fluxvec, fnum, prim, qnum, facedir, lohisign)

      F(CHF_IX[i;j;k],CRHO) = fluxvec(CRHO)
      F(CHF_IX[i;j;k],CENG) = fluxvec(CENG)

      CHF_DTERM[
      F(CHF_IX[i;j;k],CMOMX) = fluxvec(CMOMX);
      F(CHF_IX[i;j;k],CMOMY) = fluxvec(CMOMY);
      F(CHF_IX[i;j;k],CMOMZ) = fluxvec(CMOMZ)]

      CHF_ENDDO

      return
      end

      subroutine pointebiooutflowbc(
     &     chf_vr[flux],
     &     chf_vr[prim],
     &     chf_const_int[facedir],
     $     chf_const_int[lohisign])

      integer ivec, qnum, fnum
      real_t   fluxvec(0:FNUM-1)
      real_t   priml(0:QNUM-1)
      real_t   primr(0:QNUM-1)
      real_t   primgod(0:QNUM-1)
#include "EBInflowOutflowCommon.fh"
#include "EBEOSCommon.fh"
      
      qnum = QNUM-1
      fnum = FNUM-1

      do ivec = 0, QNUM-1
         priml(ivec) = prim(ivec)
         primr(ivec) = prim(ivec)
      enddo

c set  outside pressure to value of back pressure 
      if(lohisign .eq. 1) then
         primr(QPRES) = backpressure
      else
         priml(QPRES) = backpressure
      endif

      call pointriemann(priml,qnum,primr,qnum,primgod,qnum,facedir)
      call pointgetflux(flux, fnum, primgod, qnum, facedir)

      return
      end



ccccccccccccccc inflow bcs
      subroutine EBIOINFLOWBC(
     &     CHF_FRA[F],
     &     CHF_CONST_FRA[Wextrap],
     &     CHF_CONST_INT[lohisign],
     &     CHF_CONST_INT[facedir],
     &     CHF_BOX[box])

      integer chf_ddecl[i; j; k]
      real_t    veloc(0:CH_SPACEDIM-1)
      real_t   fluxvec(0:FNUM-1)
      real_t   prim(0:QNUM-1)
      real_t press, dense,  entropy, internal, cvtemp, sound
      integer qnum, fnum, idir,sdim
#include "EBEOSCommon.fh"

      qnum = QNUM-1
      fnum = FNUM-1
      sdim = CH_SPACEDIM

      CHF_MULTIDO[box;i;j;k]

      press   = Wextrap(CHF_IX[i;j;k],QPRES)
      dense   = Wextrap(CHF_IX[i;j;k],QRHO)
c     these two do not affect the calculation
      sound = Wextrap(CHF_IX[i;j;k],QC)
      entropy = Wextrap(CHF_IX[i;j;k],QENTR)
      internal = Wextrap(CHF_IX[i;j;k],QINTERN)
      cvtemp = internal/dense
      do idir = 0, sdim-1
         veloc(idir) = Wextrap(CHF_IX[i;j;k],QVELX + idir)
      enddo

      call fillprimitivevector(prim, qnum, dense, press, veloc,  entropy, internal, cvtemp, sound)

      call pointebioinflowbc(fluxvec, fnum, prim, qnum, facedir, lohisign)

      F(CHF_IX[i;j;k],CRHO) = fluxvec(CRHO)
      F(CHF_IX[i;j;k],CENG) = fluxvec(CENG)

      CHF_DTERM[
      F(CHF_IX[i;j;k],CMOMX) = fluxvec(CMOMX);
      F(CHF_IX[i;j;k],CMOMY) = fluxvec(CMOMY);
      F(CHF_IX[i;j;k],CMOMZ) = fluxvec(CMOMZ)]

      CHF_ENDDO

      return
      end

      subroutine pointebioinflowbc(
     &     chf_vr[flux],
     &     chf_vr[prim],
     &     chf_const_int[facedir],
     $     chf_const_int[lohisign])

      integer ivec, qnum, fnum, idir
      real_t   fluxvec(0:FNUM-1)
      real_t   priml(0:QNUM-1)
      real_t   primr(0:QNUM-1)
      real_t   primgod(0:QNUM-1)
#include "EBInflowOutflowCommon.fh"
#include "EBEOSCommon.fh"
      
      qnum = QNUM-1
      fnum = FNUM-1

      do ivec = 0, QNUM-1
         priml(ivec) = prim(ivec)
         primr(ivec) = prim(ivec)
      enddo

c set  outside state to inflow stuff
      if(lohisign .eq. 1) then
         primr(QRHO) = rhoinflow
         do idir = 0, CH_SPACEDIM-1
            primr(QVELX + idir) = zero
         enddo
         primr(QVELX + facedir) = velinflow
         primr(QPRES) = presinflow
         primr(QC)   = cinflow
         
      else
         priml(QRHO) = rhoinflow
         do idir = 0, CH_SPACEDIM-1
            priml(QVELX + idir) = zero
         enddo
         priml(QVELX + facedir) = velinflow
         priml(QPRES) = presinflow
         priml(QC)   = cinflow

      endif

      call pointriemann(priml,qnum,primr,qnum,primgod,qnum,facedir)
      call pointgetflux(flux, fnum, primgod, qnum, facedir)

      return
      end

cccccccccccccc slipwall bcs
      subroutine EBIOSLIPWALLBC(
     &     CHF_FRA[F],
     &     CHF_CONST_FRA[Wextrap],
     &     CHF_CONST_INT[lohisign],
     &     CHF_CONST_INT[facedir],
     &     CHF_BOX[box])

      integer chf_ddecl[i; j; k]
      real_t    veloc(0:CH_SPACEDIM-1)
      real_t   fluxvec(0:FNUM-1)
      real_t   prim(0:QNUM-1)
      real_t press, dense,  entropy, internal, cvtemp, sound
      integer qnum, fnum, idir,sdim
#include "EBEOSCommon.fh"

      qnum = QNUM-1
      fnum = FNUM-1
      sdim = CH_SPACEDIM

      CHF_MULTIDO[box;i;j;k]

      press   = Wextrap(CHF_IX[i;j;k],QPRES)
      dense   = Wextrap(CHF_IX[i;j;k],QRHO)
c     these two do not affect the calculation
      sound = Wextrap(CHF_IX[i;j;k],QC)
      entropy = Wextrap(CHF_IX[i;j;k],QENTR)
      internal = Wextrap(CHF_IX[i;j;k],QINTERN)
      cvtemp = internal/dense
      do idir = 0, sdim-1
         veloc(idir) = Wextrap(CHF_IX[i;j;k],QVELX + idir)
      enddo

      call fillprimitivevector(prim, qnum, dense, press, veloc,  entropy, internal, cvtemp, sound)

      call pointebioslipwallbc(fluxvec, fnum, prim, qnum, facedir, lohisign)

      F(CHF_IX[i;j;k],CRHO) = fluxvec(CRHO)
      F(CHF_IX[i;j;k],CENG) = fluxvec(CENG)

      CHF_DTERM[
      F(CHF_IX[i;j;k],CMOMX) = fluxvec(CMOMX);
      F(CHF_IX[i;j;k],CMOMY) = fluxvec(CMOMY);
      F(CHF_IX[i;j;k],CMOMZ) = fluxvec(CMOMZ)]

      CHF_ENDDO

      return
      end

      subroutine pointebioslipwallbc(
     &     chf_vr[flux],
     &     chf_vr[prim],
     &     chf_const_int[facedir],
     $     chf_const_int[lohisign])

      integer ivec, qnum, fnum, idir
      real_t   fluxvec(0:FNUM-1)
      real_t   priml(0:QNUM-1)
      real_t   primr(0:QNUM-1)
      real_t   primgod(0:QNUM-1)
#include "EBInflowOutflowCommon.fh"
#include "EBEOSCommon.fh"
      
      qnum = QNUM-1
      fnum = FNUM-1

      do ivec = 0, QNUM-1
         priml(ivec) = prim(ivec)
         primr(ivec) = prim(ivec)
      enddo

c set  outside state to inside state with reversed normal velocity

      if(lohisign .eq. 1) then
         primr(QVELX + facedir) = -prim(QVELX + facedir)
      else
         priml(QVELX + facedir) = -prim(QVELX + facedir)
      endif

      call pointriemann(priml,qnum,primr,qnum,primgod,qnum,facedir)
      call pointgetflux(flux, fnum, primgod, qnum, facedir)

      return
      end

