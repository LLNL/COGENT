#
# $(top_srcdir)/bootstrap runs this in each directory under lib/test, to
# produce an appropriate Makefile.am.
#

import glob
import sys
import os
import re
import chombo_utils
from chombo_utils import echo_n


if __name__ == '__main__':
  print '#*******************************************************************#'
  print '# Do not edit this file.  It was generated by                       #'
  print '# lib/mk/autoconf/test_makemakefile_am.py.                          #'
  print '#*******************************************************************#'

  print 'include $(top_srcdir)/lib/mk/autoconf/Automake.rules'
  
  def echo_n( str ):
      """ Like 'echo -n' """
      sys.stdout.write( str )
  
  #
  # Checking existence of various types of files.
  #
  has_chf = (len(glob.glob('*.ChF')) > 0)
  has_cpp = (len(glob.glob('*.cpp')) > 0)
  has_F   =  (len(glob.glob('*.F'))  > 0)
  has_f   =  (len(glob.glob('*.f'))  > 0)
  has_H5  =  (len(glob.glob('*.H5')) > 0)
  has_H   =  (len(glob.glob('*.H')) > 0)
  has_inputs = (len(glob.glob('*inputs*')) > 0)

  #
  # nodist_fort_HEADERS
  #
  if has_chf:
    echo_n( 'nodist_fort_HEADERS = ' )
    for f in glob.glob('*.ChF'):
      stump=f.split('.')[0]
      echo_n( stump + '_F.H ' )
    print ''
    print 'fortdir = /tmp'  # Don't want to clobber anything from lib/src,
                            # but need to go through these motions or else the
                            # fortran headers get deleted at strange times,
                            # making it hard to resume from a failed compilation.
  
  echo_n( "GENERATED_FORTRAN_SOURCES = " )
  if has_chf:
    for f in glob.glob('*.ChF'):
        stump=f.split('.')[0]
        echo_n( stump + '.f ')
  print ""
  
  echo_n( "RAW_FORTRAN = " )
  if has_F:
    for f in glob.glob('*.F'):
      echo_n( f + ' ' )
  print ""
  
  #
  # We're assuming every cpp file has a main().
  # The "nodist" is so we don't try to generate .f files when we "make dist".
  # If there are tests we don't want to build (or run), list their .cpp
  # files in the optional file skip_these.txt.
  #
  #
  # programs
  #
  print 'if !SMALLBUILD_AM'
  echo_n( 'bin_PROGRAMS = ' )
  for f in glob.glob('*.cpp'):
      skip=False
      if os.path.exists( 'skip_these.txt' ):
          skip_these = open('skip_these.txt').readlines()
          if (f+'\n') in skip_these:
              skip=True
      if not skip:
          exe = f.split('.')[0]
          echo_n( exe + ' ' )
  
  print ""
  print 'endif !SMALLBUILD_AM'
  curdir=os.path.basename( os.getcwd() )
  echo_n( 'bindir = $(libexecdir)/Chombo/tests/' + curdir + '\n' )
  
  for f in glob.glob('*.cpp'):
      skip=False
      if os.path.exists( 'skip_these.txt' ):
          skip_these = open('skip_these.txt').readlines()
          if (f+'\n') in skip_these:
              skip=True
      if not skip:
          exe = f.split('.')[0]
          echo_n( 'nodist_' + exe + '_SOURCES = $(GENERATED_FORTRAN_SOURCES) $(RAW_FORTRAN) ' + f + '\n')
  
  sys.stdout.write( 'AM_LDFLAGS += '
                   + chombo_utils.getAM_LDFLAGS(curdir,src_test='test')
                   + '\n' )
  
  #
  # Install inputs and H5 files, if any.
  #
  if has_inputs or has_H5:
      echo_n( 'EXTRA_stuff_DATA = ' )
      if has_inputs:
        echo_n( '$(srcdir)/*inputs* ' )
      if has_H5:
        echo_n( '$(srcdir)/*.H5 ' )
      print ''
      print 'EXTRA_stuffdir = $(bindir)'

  #
  # Headers, if any.
  #
  if has_H:
      echo_n( 'headers_HEADERS = $(srcdir)/*.H\n' )
      echo_n( 'headersdir = $(pkgincludedir)\n' )
  
  #
  # Counteract the nodist_ above.
  #
  echo_n( 'EXTRA_DIST += ' )
  if has_chf:
    echo_n( '$(srcdir)/*.ChF ' )
  if has_cpp:
    echo_n( '$(srcdir)/*.cpp ' )
  if has_F:
    echo_n( '$(srcdir)/*.F ' )
  if has_f:
    echo_n( '$(srcdir)/*.f ' )
  if has_H5:
    echo_n( '$(srcdir)/*.H5 ' )
  if has_inputs:
    echo_n( '$(srcdir)/*inputs*' )
  print ''

  if os.path.isfile('MakefileAm.extra') : print 'include $(srcdir)/MakefileAm.extra'
