#!/bin/sh

#
# Ensure that installed header files' timestamps are no
# newer than those of the corresponding source files.  If we
# don't do this, the build system will think headers have changed,
# and then recompile needlessly.
#

if test $# -ne 2; then
    echo "Usage: $0 <pkgincludedir> <srcdir>"
    exit 1
fi
pkgincludedir=$1
srcdir=$2

#
# Files ending in _F.H are generated from .ChF files; set the _F.H files'
# timestamps to those of the corresponding .ChF files.
#
ls ${srcdir}/*.ChF > /dev/null 2>&1
if test $? = 0; then
    for f in ${srcdir}/*.ChF; do
        g=`basename $f | sed 's/\.ChF$//'`
        chmod -w ${pkgincludedir}/${g}_F.H
        touch -r $f ${pkgincludedir}/${g}_F.H
    done
fi

#
# Other generated files: *_ExternC_Mangler.H
# Don't worry about FortranNameMacro.H; it's generated by bootstrap, where it
# gets timestamped.
#
ls *_ExternC_Mangler.H > /dev/null 2>&1
if test $? -eq 0; then
    chmod -w *_ExternC_Mangler.H
    touch -r ${srcdir}/multidim/extern.list *_ExternC_Mangler.H
fi

#
# Deal with all other .H files (i.e. those not associated with .ChF files).
# Don't get greedy and try ${srcdir}/*.{H,H.multidim} here...
ls ${srcdir}/*.H > /dev/null 2>&1
# ... or the return code will be non-zero when you have .H but no .H.multidim
# files, and you end up not stamping many headers, resulting in massively
# unnecessary recompilation time and again.
if test $? = 0; then
    for f in ${srcdir}/*.H; do
        g=`basename $f | sed 's/_F\.H$//'`
        if ! test -f ${srcdir}/${g}.ChF; then
            chmod -w ${pkgincludedir}/`basename $f`
            touch -r $f ${pkgincludedir}/`basename $f`
        fi
    done
fi
