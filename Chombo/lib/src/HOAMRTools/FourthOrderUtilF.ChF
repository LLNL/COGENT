C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

      subroutine celltoface4thorder(
     &     CHF_FRA[faceData],
     &     CHF_CONST_FRA[cellData],
     &     CHF_BOX[faceBox],
     &     CHF_INT[faceDir])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      integer comp
      REAL_T factor1, factor2

      factor1 = seven/twelve
      factor2 = -one/twelve

      CHF_AUTOID[ii;faceDir]
      do comp = 0, CHF_NCOMP[faceData]-1
         CHF_AUTOMULTIDO[faceBox; i]
           faceData(CHF_AUTOIX[i],comp)
     &        = factor2 * cellData(CHF_OFFSETIX[i; -2*ii],comp)
     &        + factor1 * cellData(CHF_OFFSETIX[i; -ii],comp)
     &        + factor1 * cellData(CHF_AUTOIX[i],comp)
     &        + factor2 * cellData(CHF_OFFSETIX[i; +ii],comp)
         CHF_ENDDO
      enddo

      return
      end


      subroutine celltoface4thordercenters(
     &     CHF_FRA[faceData],
     &     CHF_CONST_FRA[cellData],
     &     CHF_BOX[faceBox],
     &     CHF_INT[faceDir])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      integer comp
      REAL_T factor1, factor2

      factor1 = nine/sixteen
      factor2 = -one/sixteen

      CHF_AUTOID[ii;faceDir]
      do comp = 0, CHF_NCOMP[faceData]-1
         CHF_AUTOMULTIDO[faceBox; i]
           faceData(CHF_AUTOIX[i],comp)
     &        = factor2 * cellData(CHF_OFFSETIX[i; -2*ii],comp)
     &        + factor1 * cellData(CHF_OFFSETIX[i; -ii],comp)
     &        + factor1 * cellData(CHF_AUTOIX[i],comp)
     &        + factor2 * cellData(CHF_OFFSETIX[i; +ii],comp)
         CHF_ENDDO
      enddo

      return
      end


c  ----------------------------------------------------------------------------
c  increment lapPhi with undivided 2nd-derivative difference of phi
c  in direction dir
c
c  lapPhi <=>
c  phi     =>
c  gridBox =>
c  dir     =>
c  factor  =>
c  ---------------------------------------------------------------------------
      subroutine INCREMENTLAPLACIAN(CHF_FRA[lapPhi],
     &                              CHF_CONST_FRA[phi],
     &                              CHF_BOX[gridBox],
     &                              CHF_CONST_INT[dir],
     &                              CHF_CONST_REAL[factor])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      integer comp
      REAL_T thisLap

      CHF_AUTOID[ii;dir]
      do comp=0, CHF_NCOMP[phi]-1
         CHF_AUTOMULTIDO[gridBox; i]
            thisLap = phi(CHF_OFFSETIX[i; +ii], comp)
     &              + phi(CHF_OFFSETIX[i; -ii], comp)
     &           -two*phi(CHF_AUTOIX[i], comp)
            lapPhi(CHF_AUTOIX[i], comp) =
     &           lapPhi(CHF_AUTOIX[i], comp) + factor*thisLap
         CHF_ENDDO
      enddo

      return
      end


c  ----------------------------------------------------------------------------
c  increment lapPhi with undivided 2nd-derivative difference of phi
c  in direction dir:  one-sided, on low side
c
c  lapPhi <=>
c  phi     =>
c  gridBox =>
c  dir     =>
c  factor  =>
c  ---------------------------------------------------------------------------
      subroutine INCREMENTLOSIDELAPLACIAN(
     &     CHF_FRA[lapPhi],
     &     CHF_FRA[phi],
     &     CHF_BOX[gridBox],
     &     CHF_INT[dir],
     &     CHF_REAL[factor])

      integer CHF_AUTODECL[i], comp
      integer CHF_AUTODECL[ii]
      REAL_T thisLap

      CHF_AUTOID[ii;dir]
      do comp=0, CHF_NCOMP[phi]-1
         CHF_AUTOMULTIDO[gridBox; i]
            thisLap =
     &        two*phi(CHF_AUTOIX[i],comp)
     &        - five*phi(CHF_OFFSETIX[i; +ii],comp)
     &        + four*phi(CHF_OFFSETIX[i; +2*ii],comp)
     &        - phi(CHF_OFFSETIX[i; +3*ii],comp)
            lapPhi(CHF_AUTOIX[i],comp) =
     &           lapPhi(CHF_AUTOIX[i],comp) + factor*thisLap
         CHF_ENDDO
      enddo

      return
      end


c  ----------------------------------------------------------------------------
c  increment lapPhi with undivided 2nd-derivative difference of phi
c  in direction dir:  one-sided, on high side
c
c  lapPhi <=>
c  phi     =>
c  gridBox =>
c  dir     =>
c  factor  =>
c  ---------------------------------------------------------------------------
      subroutine INCREMENTHISIDELAPLACIAN(
     &     CHF_FRA[lapPhi],
     &     CHF_FRA[phi],
     &     CHF_BOX[gridBox],
     &     CHF_INT[dir],
     &     CHF_REAL[factor])

      integer CHF_AUTODECL[i], comp
      integer CHF_AUTODECL[ii]
      REAL_T thisLap

      CHF_AUTOID[ii;dir]
      do comp=0, CHF_NCOMP[phi]-1
         CHF_AUTOMULTIDO[gridBox; i]
            thisLap =
     &        two*phi(CHF_AUTOIX[i],comp)
     &        - five*phi(CHF_OFFSETIX[i; -ii],comp)
     &        + four*phi(CHF_OFFSETIX[i; -2*ii],comp)
     &        - phi(CHF_OFFSETIX[i; -3*ii],comp)
            lapPhi(CHF_AUTOIX[i],comp) =
     &           lapPhi(CHF_AUTOIX[i],comp) + factor*thisLap
         CHF_ENDDO
      enddo

      return
      end


c ----------------------------------------------------------------------
c  Compute O(h^2) undivided one-sided gradients for a direction on the
c  low side.
c  gradPhi  <=  Updated with gradients of phi
c  Phi       => Quantity to differentiate
c  gradBox   => Box where gradients are computed
c  dir       => Direction of gradient
c ----------------------------------------------------------------------

      subroutine UDivLoSideGrad(
     &   CHF_FRA[gradPhi],
     &   CHF_CONST_FRA[phi],
     &   CHF_BOX[gradBox],
     &   CHF_CONST_INT[dir])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      integer iComp

      CHF_AUTOID[ii; dir]

      do iComp = 0, CHF_NCOMP[phi] - 1
         CHF_AUTOMULTIDO[gradBox;i]
            gradPhi(CHF_AUTOIX[i], iComp) = half*(
     &         -3*phi(CHF_AUTOIX[i], iComp) +
     &          4*phi(CHF_OFFSETIX[i;+ii], iComp) -
     &            phi(CHF_OFFSETIX[i;+2*ii], iComp))
         CHF_ENDDO
      enddo

      return
      end

c ----------------------------------------------------------------------
c  Compute O(h^2) undivided one-sided gradients for a direction on the
c  high side.
c  gradPhi  <=  Updated with gradients of phi
c  Phi       => Quantity to differentiate
c  gradBox   => Box where gradients are computed
c  dir       => Direction of gradient
c ----------------------------------------------------------------------

      subroutine UDivHiSideGrad(
     &   CHF_FRA[gradPhi],
     &   CHF_CONST_FRA[phi],
     &   CHF_BOX[gradBox],
     &   CHF_CONST_INT[dir])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      integer iComp

      CHF_AUTOID[ii; dir]
      do iComp = 0, CHF_NCOMP[phi] - 1
         CHF_AUTOMULTIDO[gradBox;i]
            gradPhi(CHF_AUTOIX[i], iComp) = half*(
     &         3*phi(CHF_AUTOIX[i], iComp) -
     &         4*phi(CHF_OFFSETIX[i; -ii], iComp) +
     &           phi(CHF_OFFSETIX[i; -2*ii], iComp))
         CHF_ENDDO
      enddo

      return
      end

c ----------------------------------------------------------------------
c  Compute O(h^2) undivided centered gradients for a direction
c  gradPhi  <=  Updated with gradients of phi
c  Phi       => Quantity to differentiate
c  gradBox   => Box where gradients are computed
c  dir       => Direction of gradient
c ----------------------------------------------------------------------

      subroutine UDivCenterGrad(
     &   CHF_FRA[gradPhi],
     &   CHF_CONST_FRA[phi],
     &   CHF_BOX[gradBox],
     &   CHF_CONST_INT[dir])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      integer iComp

      CHF_AUTOID[ii; dir]
      do iComp = 0, CHF_NCOMP[phi] - 1
         CHF_AUTOMULTIDO[gradBox;i]
            gradPhi(CHF_AUTOIX[i], iComp) = half*(
     &         phi(CHF_OFFSETIX[i;+ii], iComp) -
     &         phi(CHF_OFFSETIX[i;-ii], iComp))
         CHF_ENDDO
      enddo

      return
      end

c -------------------------------------------------------------
c  increment with product of derivatives:
c  prod = prod + factor*(du/dxdir)*(dv/dxdir)
c
c  prod  <=>
c  u      =>
c  v      =>
c  box    => box over which prod is modified
c  dx     => grid spacing used in derivative
c  factor =>
c  dir    => derivative direction
c -----------------------------------------------------------

      subroutine INCREMENTGRADPROD(CHF_FRA[prod],
     &                             CHF_CONST_FRA[u],
     &                             CHF_CONST_FRA[v],
     &                             CHF_BOX[box],
     &                             CHF_REAL[dx],
     &                             CHF_REAL[factor],
     &                             CHF_INT[dir])

      integer CHF_AUTODECL[i], comp
      integer CHF_AUTODECL[ii]
      REAL_T halfOnDx, du, dv

      CHF_AUTOID[ii; dir]
      halfOnDx = half/dx

      if (CHF_NCOMP[u] .eq. CHF_NCOMP[v]) then

         do comp=0, CHF_NCOMP[prod]-1
            CHF_AUTOMULTIDO[box;i]
               du = u(CHF_OFFSETIX[i; +ii], comp)
     &            - u(CHF_OFFSETIX[i; -ii], comp)
               dv = v(CHF_OFFSETIX[i; +ii], comp)
     &            - v(CHF_OFFSETIX[i; -ii], comp)
               prod(CHF_AUTOIX[i], comp) = prod(CHF_AUTOIX[i], comp)
     &              + factor*halfOnDx*du*halfOnDx*dv
            CHF_ENDDO
         enddo

      else if (CHF_NCOMP[u].eq.1) then

         do comp=0, CHF_NCOMP[prod]-1
            CHF_AUTOMULTIDO[box;i]
               du = u(CHF_OFFSETIX[i; +ii], 0)
     &            - u(CHF_OFFSETIX[i; -ii], 0)
               dv = v(CHF_OFFSETIX[i; +ii], comp)
     &            - v(CHF_OFFSETIX[i; -ii], comp)
               prod(CHF_AUTOIX[i], comp) = prod(CHF_AUTOIX[i], comp)
     &              + factor*halfOnDx*du*halfOnDx*dv
            CHF_ENDDO
         enddo

      else if (CHF_NCOMP[v].eq.1) then

         do comp=0, CHF_NCOMP[prod]-1
            CHF_AUTOMULTIDO[box;i]
               du = u(CHF_OFFSETIX[i; +ii], comp)
     &            - u(CHF_OFFSETIX[i; -ii], comp)
               dv = v(CHF_OFFSETIX[i; +ii], 0)
     &            - v(CHF_OFFSETIX[i; -ii], 0)
               prod(CHF_AUTOIX[i], comp) = prod(CHF_AUTOIX[i], comp)
     &              + factor*halfOnDx*du*halfOnDx*dv
            CHF_ENDDO
         enddo

      endif

      return
      end

c ----------------------------------------------------------------------
c  increment with product of derivatives:
c  prod = prod + factor*(du/dxdir)*(dv/dxdir)
c  The difference from the previous is that du/dxdir is known
c
c  prod      <=> result
c  du         => pre-calculated *undivided* gradients of u
c  v          => this can only have 1 component
c  loBox      => box on low side where gradients of v are computed using
c                one-sided differences
c  hasLo      => 0 - no loBox, 1 - loBox exists
c  hiBox      => box on high side where gradients of v are computed
c                using one-sided differences
c  hasHi      => 0 - no hiBox, 1 - hiBox exists
c  centerBox  => box where gradients of v are computed using centered
c                differences
c  box        => box over which prod is modified
c  factor     => product rule factor
c  dir        => derivative direction
c ----------------------------------------------------------------------

      subroutine IncrementGradProdDU(
     &   CHF_FRA[prod],
     &   CHF_CONST_FRA[du],
     &   CHF_CONST_FRA1[v],
     &   CHF_BOX[loBox],
     &   CHF_CONST_INT[hasLo],
     &   CHF_BOX[hiBox],
     &   CHF_CONST_INT[hasHi],
     &   CHF_BOX[centerBox],
     &   CHF_BOX[box],
     &   CHF_CONST_REAL[factor],
     &   CHF_CONST_INT[dir])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      integer iComp

      real_t dv(CHF_DDECL[
     &             CHF_LBOUND[box;0]:CHF_UBOUND[box;0];
     &             CHF_LBOUND[box;1]:CHF_UBOUND[box;1];
     &             CHF_LBOUND[box;2]:CHF_UBOUND[box;2];
     &             CHF_LBOUND[box;3]:CHF_UBOUND[box;3];
     &             CHF_LBOUND[box;4]:CHF_UBOUND[box;4];
     &             CHF_LBOUND[box;5]:CHF_UBOUND[box;5] ])

      CHF_AUTOID[ii; dir]

c     Undivided one-sided gradients of v on the low side
      if (hasLo .eq. 1) then
         CHF_AUTOMULTIDO[loBox;i]
            dv(CHF_AUTOIX[i]) = half*(
     &         -3*v(CHF_AUTOIX[i]) +
     &          4*v(CHF_OFFSETIX[i;+ii]) -
     &            v(CHF_OFFSETIX[i;+2*ii]))
         CHF_ENDDO
      endif

c     Undivided one-sided gradients of v on the low side
      if (hasHi .eq. 1) then
         CHF_AUTOMULTIDO[hiBox;i]
            dv(CHF_AUTOIX[i]) = half*(
     &         3*v(CHF_AUTOIX[i]) -
     &         4*v(CHF_OFFSETIX[i;-ii]) +
     &           v(CHF_OFFSETIX[i;-2*ii]))
         CHF_ENDDO
      endif

c     Undivided centered gradients of v
      CHF_AUTOMULTIDO[centerBox;i]
         dv(CHF_AUTOIX[i]) = half*(
     &      v(CHF_OFFSETIX[i;+ii]) -
     &      v(CHF_OFFSETIX[i;-ii]))
      CHF_ENDDO

c     Add the products
      do iComp = 0, CHF_NCOMP[prod]-1
         CHF_AUTOMULTIDO[box;i]
            prod(CHF_AUTOIX[i], iComp) = prod(CHF_AUTOIX[i], iComp) +
     &         factor*du(CHF_AUTOIX[i], iComp)*dv(CHF_AUTOIX[i])
         CHF_ENDDO
      enddo

      return
      end

c -------------------------------------------------------------
c  perform a fourth-order extrapolation to ghost cells
c  indexed by facebox
c
c  dir         => current boundary direction
c  side        => current boundary side (lo = -1,  hi = 1)
c  facebox     => indices of the ghost cells to be filled
c  interiorbox => interior data box
c  array      <=> data array
c -----------------------------------------------------------

      subroutine cellextrap4thorder(
     &     CHF_CONST_INT[dir],
     &     CHF_CONST_INT[side],
     &     CHF_BOX[interiorbox],
     &     CHF_BOX[facebox],
     &     CHF_FRA[array]
     &     )

c     local variables
      integer CHF_DDECL[i,id,ni;j,jd,nj;k,kd,nk;l,ld,nl;m,md,nm;n,nd,nn],
     &     ghost_layer, p, comp, ncomp
      double precision coef(0:3,2), sum
      data coef /  4.d0,  -6.d0,  4.d0, -1.d0,
     &            10.d0, -20.d0, 15.d0, -4.d0 /

c     to avoid  "may be uninitialized warnings"
      CHF_DTERM[
      ni = 0;
      nj = 0;
      nk = 0;
      nl = 0;
      nm = 0;
      nn = 0;
      ]
      ghost_layer = 0

      ncomp = CHF_NCOMP[array]

      CHF_DTERM[
      id = CHF_ID(0,dir)*side;
      jd = CHF_ID(1,dir)*side;
      kd = CHF_ID(2,dir)*side;
      ld = CHF_ID(3,dir)*side;
      md = CHF_ID(4,dir)*side;
      nd = CHF_ID(5,dir)*side
      ]

      CHF_MULTIDO[facebox; i;j;k;l;m;n]

        if (side .eq. -1) then
           CHF_DTERM[
           ni = id*(i-CHF_LBOUND[interiorbox;0])
           ghost_layer = ni;
           nj = jd*(j-CHF_LBOUND[interiorbox;1])
           ghost_layer = ghost_layer + nj;
           nk = kd*(k-CHF_LBOUND[interiorbox;2])
           ghost_layer = ghost_layer + nk;
           nl = ld*(l-CHF_LBOUND[interiorbox;3])
           ghost_layer = ghost_layer + nl;
           nm = md*(m-CHF_LBOUND[interiorbox;4])
           ghost_layer = ghost_layer + nm;
           nn = nd*(n-CHF_LBOUND[interiorbox;5])
           ghost_layer = ghost_layer + nn
           ]
        else if (side .eq. 1) then
           CHF_DTERM[
           ni = id*(i-CHF_UBOUND[interiorbox;0])
           ghost_layer = ni;
           nj = jd*(j-CHF_UBOUND[interiorbox;1])
           ghost_layer = ghost_layer + nj;
           nk = kd*(k-CHF_UBOUND[interiorbox;2])
           ghost_layer = ghost_layer + nk;
           nl = ld*(l-CHF_UBOUND[interiorbox;3])
           ghost_layer = ghost_layer + nl;
           nm = md*(m-CHF_UBOUND[interiorbox;4])
           ghost_layer = ghost_layer + nm;
           nn = nd*(n-CHF_UBOUND[interiorbox;5])
           ghost_layer = ghost_layer + nn
            ]
          endif

          do comp = 0, ncomp-1
             sum = 0.d0
             do p = 0, 3
                sum = sum + coef(p,ghost_layer)*
     &               array(CHF_DDECL[i-id*(ni+p);j-jd*(nj+p);k-kd*(nk+p);l-ld*(nl+p);m-md*(nm+p);n-nd*(nn+p)],comp)
             enddo
             array(CHF_IX[i;j;k;l;m;n],comp) = sum
          enddo

      CHF_ENDDO

      return
      end


c -------------------------------------------------------------
c  perform a second-order extrapolation of data contained
c  in the input array indexed by srcbox to fill the portion
c  of the same array indexed by dstbox.  It is assumed that
c  dstbox is adjacent to srcbox on either the low or high
c  side in the dir direction, and it is the calling function's
c  responsibility to check this.
c
c  dir      => extrapolation direction
c  side     => side of srcbox to which dstbox is adjacent
c              (-1 = lo, 1 = hi)
c  dstbox   => destination indices
c  srcbox   => source indices
c  array   <=> data array
c -----------------------------------------------------------

      subroutine second_order_extrap(
     &     CHF_CONST_INT[dir],
     &     CHF_CONST_INT[side],
     &     CHF_BOX[srcbox],
     &     CHF_BOX[dstbox],
     &     CHF_FRA[array]
     &     )

c     local variables
      double precision coef(0:2), sum
      data coef / 3.d0, -3.d0, 1.d0 /
      integer CHF_DDECL[i,id,ni;j,jd,nj;k,kd,nk;l,ld,nl;m,md,nm;n,nd,nn], p, comp, ncomp

c     to avoid  "may be uninitialized warnings"
      CHF_DTERM[
      ni = 0;
      nj = 0;
      nk = 0;
      nl = 0;
      nm = 0;
      nn = 0;
      ]

      ncomp = CHF_NCOMP[array]

      CHF_DTERM[
      id = CHF_ID(0,dir)*side;
      jd = CHF_ID(1,dir)*side;
      kd = CHF_ID(2,dir)*side;
      ld = CHF_ID(3,dir)*side;
      md = CHF_ID(4,dir)*side;
      nd = CHF_ID(5,dir)*side
      ]

      CHF_MULTIDO[dstbox; i;j;k;l;m;n]

        if (side .eq. -1) then
           CHF_DTERM[
           ni = id*(i-CHF_LBOUND[srcbox;0]);
           nj = jd*(j-CHF_LBOUND[srcbox;1]);
           nk = kd*(k-CHF_LBOUND[srcbox;2]);
           nl = ld*(l-CHF_LBOUND[srcbox;3]);
           nm = md*(m-CHF_LBOUND[srcbox;4]);
           nn = nd*(n-CHF_LBOUND[srcbox;5])
           ]
        else if (side .eq. 1) then
           CHF_DTERM[
           ni = id*(i-CHF_UBOUND[srcbox;0]);
           nj = jd*(j-CHF_UBOUND[srcbox;1]);
           nk = kd*(k-CHF_UBOUND[srcbox;2]);
           nl = ld*(l-CHF_UBOUND[srcbox;3]);
           nm = md*(m-CHF_UBOUND[srcbox;4]);
           nn = nd*(n-CHF_UBOUND[srcbox;5])
            ]
          endif

          do comp = 0, ncomp-1
             sum = 0.d0
             do p = 0, 2
                sum = sum + coef(p)*
     &               array(CHF_DDECL[i-id*(ni+p);j-jd*(nj+p);k-kd*(nk+p);l-ld*(nl+p);m-md*(nm+p);n-nd*(nn+p)],comp)
             enddo
             array(CHF_IX[i;j;k;l;m;n],comp) = sum
          enddo

      CHF_ENDDO

      return
      end

c ----------------------------------------------------------------------
c  Determine transverse components of N by averaging from nearby faces
c
c  Nface          <=  On 'faceDir' faces, filled with transverse
c                     components in direction 'transverseDir'
c  NtransverseFace => Contains normal components of N on the faces in
c                     the transverse directions
c  faceBox         => The faces where Nface is updated
c  grownCellBox    => Essentially
c                     'grow(faceBox, faceDir).enclosedCells(faceDir)'
c                     Sum of metrics terms from opposing faces in
c                     transverse direction are stored here.
c  faceDir         => The faces to update with transverse terms
c  transverseDir   => The transverse direction
c ----------------------------------------------------------------------

      subroutine AverageTransverseN(
     &   CHF_FRA[Nface],
     &   CHF_CONST_FRA[NtransverseFace],
     &   CHF_BOX[faceBox],
     &   CHF_BOX[grownCellBox],
     &   CHF_CONST_INT[faceDir],
     &   CHF_CONST_INT[transverseDir])

      integer idxN, s
      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[iif]
      integer CHF_AUTODECL[iit]

      real_t NtrSum(
     &   CHF_DDECL[
     &      CHF_LBOUND[grownCellBox;0]:CHF_UBOUND[grownCellBox;0];
     &      CHF_LBOUND[grownCellBox;1]:CHF_UBOUND[grownCellBox;1];
     &      CHF_LBOUND[grownCellBox;2]:CHF_UBOUND[grownCellBox;2];
     &      CHF_LBOUND[grownCellBox;3]:CHF_UBOUND[grownCellBox;3];
     &      CHF_LBOUND[grownCellBox;4]:CHF_UBOUND[grownCellBox;4];
     &      CHF_LBOUND[grownCellBox;5]:CHF_UBOUND[grownCellBox;5] ],
     &   0:CH_SPACEDIM-1)

      CHF_AUTOID[iif; faceDir]
      CHF_AUTOID[iit; transverseDir]
      idxN = transverseDir*CH_SPACEDIM

c-----Sum of transverse metrics (in cell from opposing faces)

      do s = 0, CH_SPACEDIM-1
         CHF_AUTOMULTIDO[grownCellBox;i]
            NtrSum(CHF_AUTOIX[i], s) =
     &         NtransverseFace(CHF_AUTOIX[i], idxN+s) +
     &         NtransverseFace(CHF_OFFSETIX[i;+iit], idxN+s)
         CHF_ENDDO
      enddo

c-----Now average (from cells on either side of face)

      do s = 0, CH_SPACEDIM-1
         CHF_AUTOMULTIDO[faceBox;i]
            Nface(CHF_AUTOIX[i], idxN+s) = fourth*(
     &         NtrSum(CHF_OFFSETIX[i;-iif], s) +
     &         NtrSum(CHF_AUTOIX[i], s))
         CHF_ENDDO
      enddo

      return
      end

! -------------------------------------------------------------
!     Return cell-centered gradient of cell-centered quantity,
!     with fourth-order centered-difference formula.
!
!     gradf <=  array containing gradient at cell centers
!     f      => array containing function values at cell centers
!     dx     => mesh spacing
!     bx     => box on which gradient is to be returned
!
!     Need f to be defined on bx grown by 2.
! -----------------------------------------------------------

      subroutine centeredgradient4thorder(
     &     CHF_FRA[gradf],
     &     CHF_CONST_FRA1[f],
     &     CHF_CONST_REALVECT[dx],
     &     CHF_BOX[bx])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      integer idir
      real_t dif1, dif2

      CHF_AUTOMULTIDO[bx; i]
         do idir = 0, CH_SPACEDIM-1
            CHF_AUTOID[ii; idir]
            dif1 = f(CHF_OFFSETIX[i; +ii]) - f(CHF_OFFSETIX[i; -ii])
            dif2 = f(CHF_OFFSETIX[i; +2*ii]) - f(CHF_OFFSETIX[i; -2*ii])
            gradf(CHF_AUTOIX[i], idir) =
     &           (eight * dif1 - dif2) / (twelve * dx(idir))
         end do
      CHF_ENDDO

      return
      end

! -------------------------------------------------------------
!     Return cell-centered gradient of cell-centered quantity,
!     with sixth-order centered-difference formula.
!
!     gradf <=  array containing gradient at cell centers
!     f      => array containing function values at cell centers
!     dx     => mesh spacing
!     bx     => box on which gradient is to be returned
!
!     Need f to be defined on bx grown by 3.
! -----------------------------------------------------------

      subroutine centeredgradient6thorder(
     &     CHF_FRA[gradf],
     &     CHF_CONST_FRA1[f],
     &     CHF_CONST_REALVECT[dx],
     &     CHF_BOX[bx])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      integer idir
      real_t dif1, dif2, dif3

      CHF_AUTOMULTIDO[bx; i]
         do idir = 0, CH_SPACEDIM-1
            CHF_AUTOID[ii; idir]
            dif1 = f(CHF_OFFSETIX[i; +ii]) - f(CHF_OFFSETIX[i; -ii])
            dif2 = f(CHF_OFFSETIX[i; +2*ii]) - f(CHF_OFFSETIX[i; -2*ii])
            dif3 = f(CHF_OFFSETIX[i; +3*ii]) - f(CHF_OFFSETIX[i; -3*ii])
            gradf(CHF_AUTOIX[i], idir) =
     &           ((four*ten+five)*dif1 - nine*dif2 + dif3) /
     &           (six * ten * dx(idir))
         end do
      CHF_ENDDO

      return
      end
