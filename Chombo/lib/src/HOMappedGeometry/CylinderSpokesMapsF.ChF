C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

      subroutine cylinderspokesreal(
!
!     => inputs,  <= outputs
!     x     <= real coordinates, in physical space
!     iblock => block number
!     xi     => mapped coordinates, in cartesian space
     &     CHF_REALVECT[x],
     &     CHF_CONST_INT[iblock],
     &     CHF_CONST_REALVECT[xi])
#if CH_SPACEDIM >= 2
#include "CylinderCommon.fh"
      real_t abc(0:CH_SPACEDIM-1), a, b, c, r0, r, e, f2, f, g

      CHF_DTERM[
      abc(0) = (two * (xi(0) - maplox(iblock)) - one)
     &     * sgncrx(iblock) ;
      abc(1) = (two * (xi(1) - maploy(iblock)) - one)
     &     * sgncry(iblock) ;
      abc(2) = (two * (xi(2) - maploz(iblock)) - one)
     &     * sgncrz(iblock) ;
      ; ; ]
      if (iblock .eq. 0) then
!     central block
!     Valid xi in range [0:1]^D.
         CHF_DTERM[
         x(0) = half * reclenx * abc(0) + centerx ;
         x(1) = half * recleny * abc(1) + centery ;
         x(2) = half * reclenz * abc(2) + centerz ;
         ; ; ]
      else
         r0 = reclenx * half
         a = abc(inda(iblock))
         b = abc(indb(iblock))
         r = (r0 * (one - b) + radius * (one + b)) * half
         e = one + a*a
         f2 = ((radius - r) + (r - r0) * e) / (radius - r0)
         if (f2 .le. zero) then
            print *, 'Bad call to cylinderspokesreal for block ',
     &           iblock
            call MAYDAY_ERROR()
         endif
         f = sqrt(f2)
         g = r / f
         CHF_DTERM[
         x(0) = g * sgncrx(iblock) ;
         x(1) = g * sgncry(iblock) ;
         x(2) = g * sgncrz(iblock) ;
         ; ; ]
         x(inda(iblock)) = x(inda(iblock)) * a
      endif
#if CH_SPACEDIM >= 3
      x(2) = (xi(2) - half) * reclenz
#endif
      CHF_DTERM[
      x(0) = x(0) + centerx ;
      x(1) = x(1) + centery ;
      x(2) = x(2) + centerz ;
      ; ; ]
#endif

      return
      end


      subroutine cylinderspokesmapped(
!
!     => inputs,  <= outputs
!     xi    <=  mapped coordinates, in cartesian space
!     iblock => block number
!     x      => real coordinates, in physical space
     &     CHF_REALVECT[xi],
     &     CHF_CONST_INT[iblock],
     &     CHF_CONST_REALVECT[x])

#if CH_SPACEDIM >= 2
#include "CylinderCommon.fh"

      real_t CHF_AUTODECL[trans]
      real_t abc(0:CH_SPACEDIM-1), r0, a, g, e
      real_t xun(0:CH_SPACEDIM-1)
      real_t aquad, bquad, cquad, disc, r, b

      CHF_DTERM[
      trans0 = x(0) - centerx ;
      trans1 = x(1) - centery ;
      trans2 = x(2) - centerz ;
      trans3 = x(3) ;
      trans4 = x(4) ;
      trans5 = x(5) ]

      r0 = reclenx * half
      if (iblock .eq. 0) then
!     central block
!     Valid xi in range [0:1]^D.
         CHF_DTERM[
         abc(0) = trans0 / r0 ;
         abc(1) = trans1 / r0 ;
         abc(2) = trans2 / r0 ;
         ; ; ]
      else
         CHF_DTERM[
         xun(0) = trans0 * sgncrx(iblock) ;
         xun(1) = trans1 * sgncry(iblock) ;
         xun(2) = trans2 * sgncrz(iblock) ;
         ; ; ]
         g = xun(indb(iblock))
         a = xun(inda(iblock)) / g
         e = one + a*a
         aquad = radius - r0
         bquad = (one - e) * g*g
         cquad = (r0 * e - radius) * g*g
         disc = bquad * bquad - four * aquad * cquad
         r = (-bquad + sqrt(disc)) / (two * aquad)
         b = (two * r - radius - r0) / (radius - r0)
         if (disc .lt. zero) then
            print *, 'Bad call to cylinderspokesmapped for block',
     &           iblock, ' a = ', a, ', b = ', b
            call MAYDAY_ERROR()
         endif
         abc(inda(iblock)) = a
         abc(indb(iblock)) = b
      endif
      CHF_DTERM[
      xi(0) = maplox(iblock) + (sgncrx(iblock) * abc(0) + one) * half ;
      xi(1) = maploy(iblock) + (sgncry(iblock) * abc(1) + one) * half ;
      xi(2) = maploz(iblock) + (sgncrz(iblock) * abc(2) + one) * half ;
      ; ; ]
#if CH_SPACEDIM >= 3
      xi(2) = trans2 / reclenz + half
#endif
#endif

      return
      end


      subroutine cylinderspokesderiv(
!
!     => inputs,  <= outputs
!     deriv <=  derivative dx[indx]/dxi[indxi]
!     iblock => block number
!     xi     => mapped coordinates, in cartesian space
!     indx   => index of X for derivative
!     indxi  => index of xi for derivative
     &     CHF_REAL[deriv],
     &     CHF_CONST_INT[iblock],
     &     CHF_CONST_REALVECT[xi],
     &     CHF_CONST_INT[indx],
     &     CHF_CONST_INT[indxi])

#if CH_SPACEDIM >= 2
#include "CylinderCommon.fh"
      real_t abc(0:CH_SPACEDIM-1), a, b, c, r0, r, e, f2, f, g, h
      real_t drdb, gbyr

!     First set deriv to one of dX[indx]/d{a, b, c}.
!     Then multiply by +/- 2 to get dX[indx]/dXi[indxi].
      if ( (indxi .eq. 2) .and. (indx .eq. 2) ) then
!     dX[indx]/dc
         deriv = reclenz
      elseif ( (indxi .eq. 2) .or. (indx .eq. 2) ) then
!     One, but not both, is 2
         deriv = zero
      elseif (iblock .eq. 0) then
!     central block
!     Valid xi in range [0:1]^D.
!     Note x(i) depends on xi(i) only, and not on other components.
         if (indx .ne. indxi) then
!     assumes reclenx == recleny
            deriv = reclenx * half
         else
            deriv = zero
         endif
      else
         if ((indxi .eq. 2) .or. (indx .eq. 2)) then
            CHF_DSELECT[ ; ;
            if (indx .ne. indxi) then
               deriv = zero
            else
               deriv = reclenz
            endif ]
         else
            CHF_DTERM[
            abc(0) = (two * (xi(0) - maplox(iblock)) - one)
     &           * sgncrx(iblock) ;
            abc(1) = (two * (xi(1) - maploy(iblock)) - one)
     &           * sgncry(iblock) ;
            abc(2) = (two * (xi(2) - maploz(iblock)) - one)
     &           * sgncrz(iblock) ;
            ; ; ]
            r0 = reclenx * half
            a = abc(inda(iblock))
            b = abc(indb(iblock))
            r = (r0 * (one - b) + radius * (one + b)) * half
            e = one + a*a
            f2 = ((radius - r) + (r - r0) * e) / (radius - r0)
            if (f2 .le. zero) then
               print *, 'Bad call to cylinderspokesderiv for block ',
     &              iblock
               call MAYDAY_ERROR()
            endif
            f = sqrt(f2)
            g = r / f
            h = one / ((r0 - radius) * (f*f*f))
            if (indxi .eq. indb(iblock)) then
               drdb = (radius - r0) * half
               gbyr = one / (f*f*f) + a*a * (r0 - r*half) * h
               deriv = drdb * gbyr
               if (indx .eq. inda(iblock)) then
                  deriv = deriv * a
               endif
            else if (indxi .eq. inda(iblock)) then
               deriv = a * r*(r - r0) * h
               if (indx .eq. inda(iblock)) then
                  deriv = deriv * a + g
               endif
            endif
            if (indx .eq. 0) then
               deriv = deriv * sgncrx(iblock)
            elseif (indx .eq. 1) then
               deriv = deriv * sgncry(iblock)
            endif
         endif
      endif
      deriv = deriv * two
      if (indxi .eq. 0) then
         deriv = deriv * sgncrx(iblock)
      elseif (indxi .eq. 1) then
         deriv = deriv * sgncry(iblock)
      elseif (indxi .eq. 2) then
         deriv = deriv * sgncrz(iblock)
      endif
#endif

      return
      end
