C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

c ----------------------------------------------------------------------------------
c  computes fourth-order averaged face-centered 1/J term
c  which is defined using the face-averaged J (passed in in the
c  1/J data holder) and the tangential gradients of J
c
c  Jinverse <=> (input) face-centered approximation to <J>
c               (output) face-centered approximatino to <1/J>
c  tanGradJ  => tangential gradients of J
c  faceBox   => face-centered box over which we're computing
c --------------------------------------------------------------------------
      subroutine computeJinverse(CHF_FRA1[Jinverse],
     &                           CHF_FRA[tanGradJ],
     &                           CHF_BOX[faceBox])

      integer CHF_DDECL[i;j;k;l;m;n]
      integer tanDir
      REAL_T temp, twentyFour

      twentyFour = three*eight
c      twelve = three*four

      CHF_MULTIDO[faceBox; i;j;k;l;m;n]

c       first compute sum(tanGrad^2)
c       this will have to be somewhat different for 4D, but that's life
        temp = CHF_DTERM[0;
     &        +tanGradJ(CHF_IX[i;j;k;l;m;n],0)*tanGradJ(CHF_IX[i;j;k;l;m;n],0);
     &        +tanGradJ(CHF_IX[i;j;k;l;m;n],1)*tanGradJ(CHF_IX[i;j;k;l;m;n],1);
     &        +tanGradJ(CHF_IX[i;j;k;l;m;n],2)*tanGradJ(CHF_IX[i;j;k;l;m;n],2);
     &        +tanGradJ(CHF_IX[i;j;k;l;m;n],3)*tanGradJ(CHF_IX[i;j;k;l;m;n],3);
     &        +tanGradJ(CHF_IX[i;j;k;l;m;n],4)*tanGradJ(CHF_IX[i;j;k;l;m;n],4)]

        temp = temp/(twelve*Jinverse(CHF_IX[i;j;k;l;m;n])*Jinverse(CHF_IX[i;j;k;l;m;n]))
        Jinverse(CHF_IX[i;j;k;l;m;n]) = (one + temp)/Jinverse(CHF_IX[i;j;k;l;m;n])


      CHF_ENDDO

      return
      end

c ----------------------------------------------------------------------
c  Computes the magnitude of the normal components of N for a given
c  direction
c
c  NMagDir  <=  magnitude of N for desired direction
c  N         => matrix N
c  beginNDirComp
c            => First component of N normal to desired direction
c               (start of row of N^T for a given direction)
c  faceBox   => Box on which to compute NMagDir for desired direction
c ----------------------------------------------------------------------

      subroutine magnitudeN(CHF_FRA1[NMagDir],
     &                      CHF_CONST_FRA[N],
     &                      CHF_CONST_INT[beginNDirComp],
     &                      CHF_BOX[faceBox])

c     Index over the face box
      integer CHF_AUTODECL[i]
c     Index over components in a row of N
      integer iNC

c     Store square of first component
      CHF_AUTOMULTIDO[facebox; i]
         NMagDir(CHF_AUTOIX[i]) = N(CHF_AUTOIX[i], beginNDirComp)**2
      CHF_ENDDO

c     Add in squares of remaining components
      do iNC = beginNDirComp + 1, beginNDirComp + CH_SPACEDIM - 1
         CHF_AUTOMULTIDO[facebox; i]
            NMagDir(CHF_AUTOIX[i]) = NMagDir(CHF_AUTOIX[i]) +
     &         N(CHF_AUTOIX[i], iNC)**2
         CHF_ENDDO
      enddo

c     Take sqrt
      CHF_AUTOMULTIDO[facebox; i]
         NMagDir(CHF_AUTOIX[i]) = sqrt(NMagDir(CHF_AUTOIX[i]))
      CHF_ENDDO

      return
      end
