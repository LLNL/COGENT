C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "REAL.H"
#include "CONSTANTS.H"

      subroutine matvecmultonbox(
!
!     At every point in a box, multiply a vector by a matrix
!     to get a new vector:
!     vecOut[compOut[i]] = sum_j { mat[i, j] * vecIn[compIn[j]] }
!
!     The matrix mat is stored in row-major order.
!     For 2x2, this is [0,0], [0,1], [1,0], [1,1].
!
     &     CHF_CONST_FRA[mat],
     &     CHF_CONST_FRA[vecIn],
     &     CHF_FRA[vecOut],
     &     CHF_BOX[bx],
     &     CHF_CONST_VI[compIn],
     &     CHF_CONST_VI[compOut])

      integer CHF_AUTODECL[i]
      integer maxIn, maxOut, matel, idst, isrc, cdst, csrc

      maxIn = CHF_UBOUND[compIn]
      maxOut = CHF_UBOUND[compOut]

      matel = 0
      do idst = 0, maxOut
         cdst = compOut(idst)

!     Initialize vecOut[compOut[cdst]] = mat[idst, 0] * vecIn[compin[0]].
         isrc = 0
         csrc = compIn(isrc)
         CHF_AUTOMULTIDO[bx; i]
            vecOut(CHF_AUTOIX[i], cdst) =
     &        mat(CHF_AUTOIX[i], matel) *
     &        vecIn(CHF_AUTOIX[i], csrc)
         CHF_ENDDO
         matel = matel + 1

!     Do the rest to find vecOut[compOut[cdst]].
         do isrc = 1, maxIn
            csrc = compIn(isrc)
            CHF_AUTOMULTIDO[bx; i]
               vecOut(CHF_AUTOIX[i], cdst) =
     &           vecOut(CHF_AUTOIX[i], cdst) +
     &           mat(CHF_AUTOIX[i], matel) *
     &           vecIn(CHF_AUTOIX[i], csrc)
            CHF_ENDDO
            matel = matel + 1
         enddo

      enddo

      return
      end


      subroutine vectortransformfabcen(
!
!     => inputs,  <= outputs
!     dst   <=> destination, to be incremented
!     src    => source
!     bx     => box
!     coeffs => coefficients of transformation
!     weight => weight
!
     &     CHF_FRA[dst],
     &     CHF_CONST_FRA[src],
     &     CHF_BOX[bx],
     &     CHF_CONST_R1D[coeffs],
     &     CHF_CONST_REAL[weight])

      integer CHF_AUTODECL[i]
      integer ico, idst

      CHF_AUTOMULTIDO[bx; i]
         ico = 0
         do idst = 0, CH_SPACEDIM-1
            dst(CHF_AUTOIX[i], idst) =
     &           dst(CHF_AUTOIX[i], idst) + weight * ( CHF_DTERM[
     &             coeffs(ico)   * src(CHF_AUTOIX[i], 0) ;
     &           + coeffs(ico+1) * src(CHF_AUTOIX[i], 1) ;
     &           + coeffs(ico+2) * src(CHF_AUTOIX[i], 2) ;
     &           + coeffs(ico+3) * src(CHF_AUTOIX[i], 3) ;
     &           + coeffs(ico+4) * src(CHF_AUTOIX[i], 4) ;
     &           + coeffs(ico+5) * src(CHF_AUTOIX[i], 5) ] )
            ico = ico + CH_SPACEDIM
         enddo
      CHF_ENDDO

      return
      end


      subroutine vectortransformfabavg(
!
!     => inputs,  <= outputs
!     dst   <=> destination, to be incremented
!     src    => source
!     grad   => gradients of components of src, stored with
!               derivatives of all components of src in first direction, ...,
!               derivatives of all components of src in last direction
!     bx     => box
!     nint   => number of interpolated dimensions
!     coeffs => coefficients of transformation
!     weight => weight
!
     &     CHF_FRA[dst],
     &     CHF_CONST_FRA[src],
     &     CHF_CONST_FRA[grad],
     &     CHF_BOX[bx],
     &     CHF_CONST_INT[nint],
     &     CHF_CONST_R1D[coeffs],
     &     CHF_CONST_REAL[weight])

      integer CHF_AUTODECL[i]
      integer ico, idst, igrad, icgrad

      CHF_AUTOMULTIDO[bx; i]
         ico = 0
         do idst = 0, CH_SPACEDIM-1
            dst(CHF_AUTOIX[i], idst) =
     &           dst(CHF_AUTOIX[i], idst) + weight * ( CHF_DTERM[
     &             coeffs(ico)   * src(CHF_AUTOIX[i], 0) ;
     &           + coeffs(ico+1) * src(CHF_AUTOIX[i], 1) ;
     &           + coeffs(ico+2) * src(CHF_AUTOIX[i], 2) ;
     &           + coeffs(ico+3) * src(CHF_AUTOIX[i], 3) ;
     &           + coeffs(ico+4) * src(CHF_AUTOIX[i], 4) ;
     &           + coeffs(ico+5) * src(CHF_AUTOIX[i], 5) ] )
            ico = ico + CH_SPACEDIM
         enddo
         icgrad = 0
         do igrad = 0, nint-1
            do idst = 0, CH_SPACEDIM-1
               dst(CHF_AUTOIX[i], idst) =
     &              dst(CHF_AUTOIX[i], idst) + weight * ( CHF_DTERM[
     &                coeffs(ico)   * grad(CHF_AUTOIX[i], icgrad) ;
     &              + coeffs(ico+1) * grad(CHF_AUTOIX[i], icgrad+1) ;
     &              + coeffs(ico+2) * grad(CHF_AUTOIX[i], icgrad+2) ;
     &              + coeffs(ico+3) * grad(CHF_AUTOIX[i], icgrad+3) ;
     &              + coeffs(ico+4) * grad(CHF_AUTOIX[i], icgrad+4) ;
     &              + coeffs(ico+5) * grad(CHF_AUTOIX[i], icgrad+5) ] )
               ico = ico + CH_SPACEDIM
            enddo
            icgrad = icgrad + CH_SPACEDIM
         enddo
      CHF_ENDDO

      return
      end
