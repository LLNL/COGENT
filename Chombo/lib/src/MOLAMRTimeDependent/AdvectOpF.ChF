C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

!     -----------------------------------------------------------------
!     subroutine APPLYLAP
!
!     Computes the 1-dimensional 2nd-order approximation of d^2\phi/dx^2
!     in the specified direction and accumulates into the destination arg,
!     computing and storing the fluxes as a side-effect.
!
!     INPUTS/OUTPUTS:
!     lofphi   <=>  laplacian of phi to be incremented by this subroutine.
!     flux     <=   flux in direction idir thru the face to the left
!     phi       =>  phi
!     region    =>  index range over which Laplacian is computed.
!     fluxregion=>  index range over which flux is computed.
!     dx        =>  cell spacing
!     idir      =>  direction
!
!     Warning: phi, lofphi, flux must have the same number
!     of components and span region.  Phi needs one more cell on
!     all sides. Flux is asumed to be shifted by -1/2 to have
!     cell-centered alignment.  This implies that fluxregion has one
!     more cell in the idir direction than region.
!
!
!     PC: copied from PoissonOpF.ChF , 7/19/2002.
!     ------------------------------------------------------------------
      subroutine APPLYLAP(
     &     CHF_FRA[lofphi],
     &     CHF_FRA[flux],
     &     CHF_CONST_FRA[phi],
     &     CHF_BOX[region],
     &     CHF_BOX[fluxregion],
     &     CHF_CONST_REAL[dx],
     &     CHF_CONST_INT[idir])


      !XXX -- unused var
      !XXXREAL_T lphi
      REAL_T dxinv
      integer n,ncomp

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[c2fLo]
      integer CHF_AUTODECL[c2fHi]
      integer CHF_AUTODECL[f2cLo]
      integer CHF_AUTODECL[f2cHi]

!     +c2fLo from cell to adjacent face on low side (index is same)
      CHF_AUTOID[c2fLo; idir; 0]
!     +c2fHi from cell to adjacent face on high side (index is 1 higher)
      CHF_AUTOID[c2fHi; idir; 1]

!     +f2cLo from face to adjacent cell on low side (index is 1 lower)
      CHF_AUTOID[f2cLo; idir; -1]
!     +f2cHi from face to adjacent cell on high side (index is same)
      CHF_AUTOID[f2cHi; idir; 0]

      ncomp = CHF_NCOMP[phi]
      if ( (ncomp .ne. CHF_NCOMP[lofphi]) .or.
     &     (ncomp .ne. CHF_NCOMP[flux]) ) then
!     print*, 'phi, flux, or lOfPhi are incompatible'
!     stop
         call MAYDAYERROR()
      endif

      dxinv = one/dx
      do n = 0, ncomp-1
         CHF_AUTOMULTIDO[fluxregion; i]
!     Set flux on each idir-face of fluxregion
!     to difference of phi on adjacent cells, divided by dx
            flux(CHF_AUTOIX[i],n ) =
     &        ( phi(CHF_OFFSETIX[i; +f2cLo], n)
     &        - phi(CHF_OFFSETIX[i; +f2cHi], n) ) * dxinv
         CHF_ENDDO

         CHF_AUTOMULTIDO[region; i; j; k; l]
!     Decrement lofphi on each cell of region
!     by difference of flux on adjacent idir-faces, divided by dx
            lofphi(CHF_AUTOIX[i],n) = lofphi(CHF_AUTOIX[i],n) -
     &        ( flux(CHF_OFFSETIX[i; +c2fHi], n)
     &        - flux(CHF_OFFSETIX[i; +c2fLo], n) ) * dxinv
         CHF_ENDDO
       enddo

      return
      end


!     -----------------------------------------------------------------
!     subroutine HOAVGDOWN
!     computes a 4th order average of phi using the formula
!     phicoarse = <phi> - h^2 <Laplacian(phi)>/24
!
!     INPUTS/OUTPUTS:
!     phi       =>  phi on fine grid
!     phicoarse<=   phi on coarsened grid.
!     region    =>  index range over which phicoarse is defined.
!     avstencil =>  index range over which averaging of phi is done.
!     navstencil=>  number of points in avstencil
!     lapstencil=>  index range over which averaging of laplacian(phi) is done.
!     nlapstencil=>  number of points in lapstencil
!
!     PC: 8/29/2002.
!     ------------------------------------------------------------------
      subroutine HOAVGDOWN(
     &     CHF_CONST_FRA[phi],
     &     CHF_FRA[phicoarse],
     &     CHF_CONST_INT[nrefine],
     &     CHF_BOX[region],
     &     CHF_BOX[avstencil],
     &     CHF_CONST_INT[navstencil],
     &     CHF_BOX[lapstencil],
     &     CHF_CONST_INT[nlapstencil])

      !XXX -- unused var
      !XXXREAL_T dxinv,lofphi,avlphi
      REAL_T lofphi,avlphi
      integer n,ncomp,idir
      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ic]
      integer CHF_AUTODECL[is]
      integer CHF_AUTODECL[ioff]

      ncomp = CHF_NCOMP[phi]
      if (ncomp .ne. CHF_NCOMP[phicoarse]) then
!         print*, 'phi, flux, or phiCoarse are incompatible'
!         stop
         call MAYDAYERROR()
      endif

      ncomp = CHF_NCOMP[phi]
      avlphi = 0.0
      do n = 0, ncomp-1
         CHF_AUTOMULTIDO[region; ic]

! Compute average of (h^2 Laplacian(phi)).

            CHF_AUTOMULTIDO[lapstencil;is]

               CHF_DTERM[
               i0 = ic0*nrefine + is0 ;
               i1 = ic1*nrefine + is1 ;
               i2 = ic2*nrefine + is2 ;
               i3 = ic3*nrefine + is3 ;
               i4 = ic4*nrefine + is4 ;
               i5 = ic5*nrefine + is5 ]

               lofphi = -(2*CH_SPACEDIM) * phi(CHF_AUTOIX[i], n)
               do idir = 0, CH_SPACEDIM-1
                  CHF_AUTOID[ioff; idir]
                  lofphi = lofphi +
     &                 phi(CHF_OFFSETIX[i; +ioff], n) +
     &                 phi(CHF_OFFSETIX[i; -ioff], n)
               enddo
               avlphi = avlphi + lofphi

            CHF_ENDDO
            avlphi = avlphi / nlapstencil

            phicoarse(CHF_AUTOIX[ic],n) = zero

            CHF_AUTOMULTIDO[avstencil;is]
               CHF_DTERM[
               i0 = ic0*nrefine + is0 ;
               i1 = ic1*nrefine + is1 ;
               i2 = ic2*nrefine + is2 ;
               i3 = ic3*nrefine + is3 ;
               i4 = ic4*nrefine + is4 ;
               i5 = ic5*nrefine + is5 ]
               phicoarse(CHF_AUTOIX[ic],n) =
     &              phicoarse(CHF_AUTOIX[ic],n) +
     &              phi(CHF_AUTOIX[i],n)
            CHF_ENDDO

            phicoarse(CHF_AUTOIX[ic],n) =
     &           phicoarse(CHF_AUTOIX[ic],n)/navstencil
     &           -avlphi/(twenty + four)
         CHF_ENDDO
      enddo

      return
      end


c  ---------------------------------------------------------
c  increments lapPhi with centered 2nd derivative in direction dir
c  from Colella and Sekora (note that this includes the factor of 3
c  in the definition of D^2(phi), so it's actually 3*(2ndDeriv)
c
c  lapPhi <=  face-centered 2nd derivative of phi
c  facePhi => face-centered value of phi
c  cellPhi => cell-centered phi
c  faceBox => face-centered box over which to compute lapPhi
c  idir    => direction of derivative
c  dx      => cell spacing
c ----------------------------------------------------------
      subroutine CENTEREDLAPLACIAN(CHF_FRA[lapPhi],
     &                             CHF_CONST_FRA[facePhi],
     &                             CHF_CONST_FRA[cellPhi],
     &                             CHF_BOX[faceBox],
     &                             CHF_CONST_INT[idir],
     &                             CHF_CONST_REAL[dx])

      integer n, CHF_AUTODECL[i]
      integer CHF_AUTODECL[f2cLo]
      integer CHF_AUTODECL[f2cHi]
      REAL_T factor

!     +f2cLo from face to adjacent cell on low side (index is 1 lower)
      CHF_AUTOID[f2cLo; idir; -1]
!     +f2cHi from face to adjacent cell on high side (index is same)
      CHF_AUTOID[f2cHi; idir; 0]

      factor = three/dx/dx

      do n=0, (CHF_NCOMP[facePhi]-1)
         CHF_AUTOMULTIDO[faceBox;i]
            lapPhi(CHF_AUTOIX[i],n) = lapPhi(CHF_AUTOIX[i],n)
     &        + factor *
     &        ( cellPhi(CHF_OFFSETIX[i; +f2cHi],n)
     &        + cellPhi(CHF_OFFSETIX[i; +f2cLo],n)
     &        - two * facePhi(CHF_AUTOIX[i],n) )
         CHF_ENDDO

      enddo

      return
      end


c  ----------------------------------------------------------------
c  computes cell-centered 2nd-derviatives from Colella & Sekora
c  (essentially standard 3-point cell-centered 2nd derivatives)
c
c  lapPhi <=  cell-centered 2nd-derivative of phi in direction idir
c  cellPhi => cell-centered phi
c  cellBox => cell-centered box over which to compute lapPhi
c  idir    => direction
c  dx      => cell spacing
c  ----------------------------------------------------------------
      subroutine CCLAPLACIAN(CHF_FRA[lapPhi],
     &                       CHF_CONST_FRA[cellPhi],
     &                       CHF_BOX[cellBox],
     &                       CHF_CONST_INT[idir],
     &                       CHF_CONST_REAL[dx])


      integer n, CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      REAL_T factor

      CHF_AUTOID[ii; idir]
      factor = one/dx/dx

      do n=0, (CHF_NCOMP[lapPhi]-1)
         CHF_AUTOMULTIDO[cellBox;i]
            lapPhi(CHF_AUTOIX[i],n) = lapPhi(CHF_AUTOIX[i],n)
     &        + factor *
     &        ( cellPhi(CHF_OFFSETIX[i; +ii],n)
     &        + cellPhi(CHF_OFFSETIX[i; -ii],n)
     &        - two * cellPhi(CHF_AUTOIX[i],n))
         CHF_ENDDO
      enddo

      return
      end


c  -----------------------------------------------------------------
c
c  facePhi <=  upwinded face-centered value
c  phiLeft  => face-centered value traced from the left
c  phiRight => face-centered value traced from the right
c  faceVel  => normal velocities on faces
c  faceBox  => face-centered box over which to do computation
c  ------------------------------------------------------------------
      subroutine SELECTUPWIND(CHF_FRA[facePhi],
     &                        CHF_CONST_FRA[phiLeft],
     &                        CHF_CONST_FRA[phiRight],
     &                        CHF_CONST_FRA1[faceVel],
     &                        CHF_BOX[faceBox])

      integer CHF_AUTODECL[i]
      integer n
      REAL_T zeroTol

      zeroTol = 1.0d-14

      do n=0, CHF_NCOMP[facePhi]-1
         CHF_AUTOMULTIDO[faceBox; i]
            if (faceVel(CHF_AUTOIX[i]) .gt. zeroTol) then
               facePhi(CHF_AUTOIX[i],n) = phiLeft(CHF_AUTOIX[i],n)
            elseif (faceVel(CHF_AUTOIX[i]) .lt. -zeroTol) then
               facePhi(CHF_AUTOIX[i],n) = phiRight(CHF_AUTOIX[i],n)
            else
c     averaging if velocity is "near" zero
               facePhi(CHF_AUTOIX[i],n) = half *
     &              ( phiLeft(CHF_AUTOIX[i],n) +
     &              phiRight(CHF_AUTOIX[i],n) )
            endif
         CHF_ENDDO
      enddo

      return
      end


c -------------------------------------------------------------
c  increment with vector/vector outer product on direction:
c  prod = prod + u_i * v_j
c
c  prod  <=> n-by-D tensor (result)
c  u      => n vector
c  v      => D vector
c  box    => box over which prod is modified
c -----------------------------------------------------------

      subroutine INCREMENTFACEPROD(CHF_FRA[prod],
     &                             CHF_CONST_FRA[u],
     &                             CHF_CONST_FRA[v],
     &                             CHF_BOX[box])

      integer CHF_AUTODECL[i]
      integer n, d, m

      do n=0, CHF_NCOMP[u]-1
         do d=0, CH_SPACEDIM-1
            m = n + d * CHF_NCOMP[u]
            CHF_AUTOMULTIDO[box;i]
               prod(CHF_AUTOIX[i],m) = prod(CHF_AUTOIX[i],m)
     &         + u(CHF_AUTOIX[i],n) * v(CHF_AUTOIX[i],d)
            CHF_ENDDO
         enddo
      enddo

      return
      end

c -------------------------------------------------------------
c  increment with product of derivatives:
c  prod = prod + factor*(du/dxdir)*(dv/dxdir)
c
c  prod  <=> n-by-D tensor (result)
c  u      => n vector
c  v      => D vector
c  box    => box over which prod is modified
c  dx     => grid spacing used in derivative
c  factor => multiplicative weight
c  dir    => derivative direction
c -----------------------------------------------------------

      subroutine INCREMENTFACEPRODGRAD(CHF_FRA[prod],
     &                                 CHF_CONST_FRA[u],
     &                                 CHF_CONST_FRA[v],
     &                                 CHF_BOX[box],
     &                                 CHF_REAL[dx],
     &                                 CHF_REAL[factor],
     &                                 CHF_INT[dir])

      integer CHF_AUTODECL[i]
      integer n, m, d
      integer CHF_AUTODECL[ii]
      REAL_T qtrOnDx2, du, dv

      CHF_AUTOID[ii; dir]

      qtrOnDx2 = (half/dx)**2
      do n=0, CHF_NCOMP[u]-1
         do d=0, CH_SPACEDIM-1
            m = n + d * CHF_NCOMP[u]

            CHF_AUTOMULTIDO[box; i]
               du = u(CHF_OFFSETIX[i; +ii],n) -
     &              u(CHF_OFFSETIX[i; -ii],n)
               dv = v(CHF_OFFSETIX[i; +ii],d) -
     &              v(CHF_OFFSETIX[i; -ii],d)
               prod(CHF_AUTOIX[i], m) = prod(CHF_AUTOIX[i], m)
     &              + factor * qtrOnDx2 * du * dv
            CHF_ENDDO
         enddo
      enddo

      return
      end


c -------------------------------------------------------------
c  increment with hyperviscous flux in dir direction:
c  prod = prod + u_i * v_j
c
c  flux  <=> n-by-D tensor (result)
c  u      => n vector
c  box    => box over which prod is modified
c  dx     => grid spacing used in derivative
c  dir    => derivative direction
c -----------------------------------------------------------

      subroutine ADDHYPERVISCOUSFLUX(CHF_FRA[flux],
     &                               CHF_CONST_FRA[u],
     &                               CHF_BOX[box],
     &                               CHF_REAL[mu],
     &                               CHF_REAL[dx],
     &                               CHF_CONST_INT[dir])

      integer CHF_AUTODECL[i]
      integer n, s, d
      REAL_T hvflux, coeff

      coeff = mu

      do n=0, CHF_NCOMP[u]-1

         CHF_AUTOMULTIDO[box;i]
#if 0
c h^3 hyperviscous terms
         if (dir.eq.0) then
            hvflux =
     &           ( u(i0+1,i1  ,n) - u(i0-2,i1  ,n) )
     &           - five * ( u(i0  ,i1  ,n) - u(i0-1,i1  ,n) )
     &           +        ( u(i0  ,i1+1,n) - u(i0-1,i1+1,n) )
     &           +        ( u(i0  ,i1-1,n) - u(i0-1,i1-1,n) )
         else
            hvflux =
     &           ( u(i0  ,i1+1,n) - u(i0  ,i1-2,n) )
     &           - five * ( u(i0  ,i1  ,n) - u(i0  ,i1-1,n) )
     &           +        ( u(i0+1,i1  ,n) - u(i0+1,i1-1,n) )
     &           +        ( u(i0-1,i1  ,n) - u(i0-1,i1-1,n) )
         endif
#else
#if CH_SPACEDIM == 2
c h^5 hyperviscous terms
         if (dir.eq.0) then
            hvflux =
     &              -        ( u(i0+2,i1  ,n) - u(i0-3,i1  ,n) )
     &              + nine * ( u(i0+1,i1  ,n) - u(i0-2,i1  ,n) )
     &    - (twenty+eight) * ( u(i0  ,i1  ,n) - u(i0-1,i1  ,n) )
     &              -  two * ( u(i0+1,i1+1,n) - u(i0-2,i1+1,n) )
     &              +  ten * ( u(i0  ,i1+1,n) - u(i0-1,i1+1,n) )
     &              -  two * ( u(i0+1,i1-1,n) - u(i0-2,i1-1,n) )
     &              +  ten * ( u(i0  ,i1-1,n) - u(i0-1,i1-1,n) )
     &              -        ( u(i0  ,i1+2,n) - u(i0-1,i1+2,n) )
     &              -        ( u(i0  ,i1-2,n) - u(i0-1,i1-2,n) )
         else
            hvflux =
     &              -        ( u(i0  ,i1+2,n) - u(i0  ,i1-3,n) )
     &              + nine * ( u(i0  ,i1+1,n) - u(i0  ,i1-2,n) )
     &    - (twenty+eight) * ( u(i0  ,i1  ,n) - u(i0  ,i1-1,n) )
     &              -  two * ( u(i0+1,i1+1,n) - u(i0+1,i1-2,n) )
     &              +  ten * ( u(i0+1,i1  ,n) - u(i0+1,i1-1,n) )
     &              -  two * ( u(i0-1,i1+1,n) - u(i0-1,i1-2,n) )
     &              +  ten * ( u(i0-1,i1  ,n) - u(i0-1,i1-1,n) )
     &              -        ( u(i0+2,i1  ,n) - u(i0+2,i1-1,n) )
     &              -        ( u(i0-2,i1  ,n) - u(i0-2,i1-1,n) )
         endif
#endif
#endif
         hvflux = coeff * hvflux
         flux(CHF_AUTOIX[i],n) = flux(CHF_AUTOIX[i],n) + hvflux

         CHF_ENDDO

      enddo

      return
      end


c -------------------------------------------------------------
c  compute second-order face gradients in all directions:
c
c  grad_u <=> n-by-D tensor (result)
c  u       => n vector
c  box     => box over which prod is modified
c  dx      => mesh size
c  facedir => normal direction of face
c -----------------------------------------------------------

      subroutine SECONDORDERGRADIENT(CHF_FRA[grad_u],
     &                               CHF_CONST_FRA[u],
     &                               CHF_BOX[box],
     &                               CHF_CONST_REALVECT[dx],
     &                               CHF_CONST_INT[facedir])

      integer CHF_AUTODECL[i]
      integer n, m, d
      integer CHF_AUTODECL[f2cLo]
      integer CHF_AUTODECL[f2cHi]
      integer CHF_AUTODECL[it]
      REAL_T avghi, avglo, factor(0:CH_SPACEDIM-1), result

!     +f2cLo from face to adjacent cell on low side (index is 1 lower)
      CHF_AUTOID[f2cLo; facedir; -1]
!     +f2cHi from face to adjacent cell on high side (index is same)
      CHF_AUTOID[f2cHi; facedir; 0]

      do d=0, CH_SPACEDIM-1
         factor(d) = one / dx(d)
         if (facedir.ne.d) then
            factor(d) = factor(d) * fourth
         endif
      enddo

      do n = 0, CHF_NCOMP[u]-1
         do d=0, CH_SPACEDIM-1
            m = d + n * CH_SPACEDIM

            CHF_AUTOMULTIDO[box;i]

            if (d .eq. facedir) then
               result =
     &            ( u(CHF_OFFSETIX[i; +f2cHi],n) -
     &              u(CHF_OFFSETIX[i; +f2cLo],n) )
     &              * factor(d)
            else
               CHF_AUTOID[it; d]
!     Could not figure out how to simplify this with macros,
!     because there are two offsets.
               avghi =
     &              u(CHF_IX[i0+f2cHi0+it0;i1+f2cHi1+it1;i2+f2cHi2+it2;i3+f2cHi3+it3;i4+f2cHi4+it4;i5+f2cHi5+it5], n)
     &              + u(CHF_IX[i0+f2cLo0+it0;i1+f2cLo1+it1;i2+f2cLo2+it2;i3+f2cLo3+it3;i4+f2cLo4+it4;i5+f2cLo5+it5], n)

               avglo =
     &              u(CHF_IX[i0+f2cHi0-it0;i1+f2cHi1-it1;i2+f2cHi2-it2;i3+f2cHi3-it3;i4+f2cHi4-it4;i5+f2cHi5-it5], n)
     &              + u(CHF_IX[i0+f2cLo0-it0;i1+f2cLo1-it1;i2+f2cLo2-it2;i3+f2cLo3-it3;i4+f2cLo4-it4;i5+f2cLo5-it5], n)
               result = factor(d) * ( avghi - avglo );
            endif

            grad_u(CHF_AUTOIX[i],m) = result;

            CHF_ENDDO
         enddo
      enddo

      return
      end
