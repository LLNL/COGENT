C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

c ---------------------------------------------------------------
c This subroutine computes the dir component of vorticity
c
c INPUTS/OUTPUTS:
c vort   <= vorticity, 1 component
c vel     => velocity, CH_SPACEDIM components
c gridBox => box on which to calculate vorticity
c dx      => mesh spacing
c dir     => coordinate direction of vorticity component (if 3D)
c ----------------------------------------------------------------
      subroutine COMPUTEVORT(
     &     CHF_FRA1[vort],
     &     CHF_CONST_FRA[vel],
     &     CHF_BOX[gridBox],
     &     CHF_CONST_REAL[dx],
     &     CHF_CONST_INT[dir])

c ::: local variables
      integer CHF_AUTODECL[i]
      integer dir1, dir2
      REAL_T oneOnDx
      REAL_T diff1, diff2
      integer CHF_AUTODECL[i1off]
      integer CHF_AUTODECL[i2off]

      oneOnDx = half/dx

c ::: formula will be vort(dir) = d(vel(dir2))/d(dir1) - d(vel(dir1))/d(dir2)
      if ((CH_SPACEDIM.eq.2) .or. (dir.eq.2)) then
         dir1 = 0
         dir2 = 1
      else if (dir.eq.0) then
         dir1= 1
         dir2= 2
      else if (dir.eq.1) then
         dir1=2
         dir2=0
      else
         write(*,*) 'COMPUTEVORT: bad direction = ', dir
         call MAYDAY_ERROR()
      endif

      CHF_AUTOID[i1off; dir1]

      CHF_AUTOID[i2off; dir2]

      CHF_AUTOMULTIDO[gridBox; i]

         diff1 = vel(CHF_OFFSETIX[i; +i2off],dir1)
     &         - vel(CHF_OFFSETIX[i; -i2off],dir1)

         diff2 = vel(CHF_OFFSETIX[i; +i1off],dir2)
     &         - vel(CHF_OFFSETIX[i; -i1off],dir2)

         vort(CHF_AUTOIX[i]) = oneOnDx * (diff2 - diff1)

      CHF_ENDDO

      return
      end


      subroutine SPACEDERIV(
     &     CHF_FRA1[deriv],
     &     CHF_CONST_FRA1[favg],
     &     CHF_BOX[bx],
     &     CHF_CONST_REAL[dx],
     &     CHF_CONST_INT[dir])
!     Returns a cell-averaged partial derivative of face-averaged data
!     with respect to one of the coordinate directions.
!
!     => inputs, <= outputs
!     deriv <= the discrete normal derivative of data
!     favg => face-averaged data
!     bx => the box on which the normal derivative is calculated
!     dx => mesh spacing
!     dir => the direction of the derivative (0, 1, 2)
      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[c2fLo]
      integer CHF_AUTODECL[c2fHi]
      real_t diffpt

!     +c2fLo from cell to adjacent face on low side (index is same)
      CHF_AUTOID[c2fLo; dir; 0]
!     +c2fHi from cell to adjacent face on high side (index is 1 higher)
      CHF_AUTOID[c2fHi; dir; 1]

      CHF_AUTOMULTIDO[bx; i]
         diffpt =
     &     favg(CHF_OFFSETIX[i; +c2fHi]) -
     &     favg(CHF_OFFSETIX[i; +c2fLo])
         deriv(CHF_AUTOIX[i]) = diffpt / dx
      CHF_ENDDO

      return
      end
