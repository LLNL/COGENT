C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

      subroutine SETFUNCTIONSPHERICALGRAD(
!     Evaluates gradient of spherical harmonic function
!     from physical coordinates.
!
!     => inputs,  <= outputs
!     values <= function values, 3 components on bx
!     coords => space coordinates, 3 components on bx
!     bx => indices of coords and values
!     coeffs => coefficients of Legendre function
!     l => l for Legendre function
!     m => m for Legendre function
!
!     petermc, 30 Jul 2010
     &     CHF_FRA[values],
     &     CHF_CONST_FRA[coords],
     &     CHF_BOX[bx],
     &     CHF_CONST_R1D[coeffs],
     &     CHF_CONST_INT[l],
     &     CHF_CONST_INT[m])

      integer CHF_DDECL[i;j;k]
      REAL_T x, y, z
      REAL_T r2, r, th, ph
      REAL_T sinph, cosph, sinth, costh
      REAL_T rpow, thf, thd, phf, phd
#if CH_SPACEDIM == 3
      REAL_T vr, xu, yu, zu
#endif
      REAL_T vth, vph
      REAL_T legendreeval, legendrederiv
      external legendreeval, legendrederiv

      if (CHF_NCOMP[coords] .ne. 3) then
         print *, 'SETFUNCTIONSPHERICALGRAD:  coords must have ',
     &        3, ' components'
         call MAYDAY_ERROR()
      endif
      if (CHF_NCOMP[values] .ne. 3) then
         print *, 'SETFUNCTIONSPHERICALGRAD:  values must have ',
     &        3, ' components'
         call MAYDAY_ERROR()
      endif

      CHF_MULTIDO[bx; i; j; k]
         x = coords(CHF_IX[i;j;k], 0)
         y = coords(CHF_IX[i;j;k], 1)
         z = coords(CHF_IX[i;j;k], 2)

         r2 = x*x + y*y + z*z
         r = sqrt(r2)
         th = atan2(y, x)
         cosph = z / r
!         ph = acos(cosph)
         sinph = sqrt(1 - (z*z)/r2)

         rpow = r**(l-1)
         thf = cos(m * th)
         thd = -m * sin(m * th)
         phf = legendreeval(cosph, coeffs, l, m)
         phd = legendrederiv(cosph, coeffs, l, m) * (-sinph)

!     Vector in the basis of unit vectors in r, theta, phi directions.
!     OMIT radial component.
         vth =    rpow * thd * phf / sinph
         vph =    rpow * thf * phd

         costh = cos(th)
         sinth = sin(th)

!     Vectors in the basis of unit vectors in x, y, z directions.
!     OMIT radial component.
         values(CHF_IX[i;j;k], 0) =
     &        - sinth * vth + costh * cosph * vph
!         costh * sinph * vr - sinth * vth + costh * cosph * vph
         values(CHF_IX[i;j;k], 1) =
     &        costh * vth + sinth * cosph * vph
!         sinth * sinph * vr + costh * vth + sinth * cosph * vph
         values(CHF_IX[i;j;k], 2) = - sinph * vph
!         cosph * vr - sinph * vph
#if CH_SPACEDIM == 3
!     Add radial component.
         vr = l * rpow * thf * phf
!     rhat = xu*ihat + yu*jhat + zu*khat
         xu = x / r
         yu = y / r
         zu = z / r
         values(CHF_IX[i;j;k], 0) = values(CHF_IX[i;j;k], 0) + vr*xu
         values(CHF_IX[i;j;k], 1) = values(CHF_IX[i;j;k], 1) + vr*yu
         values(CHF_IX[i;j;k], 2) = values(CHF_IX[i;j;k], 2) + vr*zu
#endif
      CHF_ENDDO

      return
      end


      subroutine MAXFUNCTIONSPHERICALGRAD(
!     Returns maximum of spherical harmonic function on valid domain.
!
!     => inputs,  <= outputs
!     funmax <= maximum of function
!     bxwid => width of box
!     outr => radius of sphere
!     coeffs => coefficients of Legendre function
!     l => l for Legendre function
!     m => m for Legendre function
!
!     petermc, 30 Jul 2010
     &     CHF_REALVECT[funmax],
     &     CHF_CONST_REAL[bxwid],
     &     CHF_CONST_REAL[outr],
     &     CHF_CONST_R1D[coeffs],
     &     CHF_CONST_INT[l],
     &     CHF_CONST_INT[m])

      return
      end
