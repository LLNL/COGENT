C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

      subroutine SETFUNCTIONCYLINDRICAL(
!     Evaluates cylindrical harmonic function from physical coordinates.
!
!     => inputs,  <= outputs
!     values <= function values, neqns components on bx
!     coords => space coordinates, neqns * CH_SPACEDIM components on bx
!     bx => indices of coords and values
!     n => n for cosine of angle
!     kk => k for exponent, in 3D cylindrical
!
!     petermc, 21 Feb 2008
     &     CHF_FRA[values],
     &     CHF_CONST_FRA[coords],
     &     CHF_BOX[bx],
     &     CHF_CONST_INT[n],
     &     CHF_CONST_INT[kk])

      integer CHF_DDECL[i;j;k]
      integer ieqn, ieqn3, neqns
      REAL_T CHF_DDECL[x;y;z]
      REAL_T r, th, r2

#if CH_SPACEDIM == 3
      double precision besr
!     Intel compiler ifort has besjn returning garbage if the function
!     is declared REAL_T in double precision.
!     REAL_T besjn
#ifdef CH_USE_DOUBLE
      double precision dbesjn
#else
      real besjn
#endif
#endif

      neqns = CHF_NCOMP[values]
      if (CHF_NCOMP[coords] .ne. CH_SPACEDIM * neqns) then
         print *, 'SETFUNCTIONCYLINDRICAL:  coords must have ',
     &        (CH_SPACEDIM * neqns), ' components'
         call MAYDAY_ERROR()
      endif

      CHF_MULTIDO[bx; i; j; k]
         do ieqn = 0, neqns - 1

            ieqn3 = CH_SPACEDIM * ieqn

            CHF_DTERM[
            x = coords(CHF_IX[i;j;k], ieqn3    ) ;
            y = coords(CHF_IX[i;j;k], ieqn3 + 1) ;
            z = coords(CHF_IX[i;j;k], ieqn3 + 2) ]

            r2 = CHF_DTERM[
     &           x*x ;
     &           + y*y ; ]
            r = sqrt(r2)

            CHF_DTERM [ ;
            th = atan2(y, x) ; ]

#if CH_SPACEDIM == 3
#ifdef CH_USE_DOUBLE
            besr = dbesjn(n, kk * r)
#else
            besr = besjn(n, kk * r)
#endif
            values(CHF_IX[i;j;k], ieqn) =
     &           besr
     &           * cos(n * th)
     &           * exp(-kk * z)
#else
            values(CHF_IX[i;j;k], ieqn) =
     &           (r**n)
     &           * cos(n * th)
#endif

         enddo
      CHF_ENDDO

      return
      end


      subroutine MAXFUNCTIONCYLINDRICAL(
!     Returns maximum of cylindrical harmonic function on valid domain.
!
!     => inputs,  <= outputs
!     funmax <= maximum of function
!     bxwid => width of box
!     outr => radius of cylinder
!     n => n for cosine of angle
!     kk => k for exponent, in 3D cylindrical
!
!     petermc, 15 Mar 2008
     &     CHF_REAL[funmax],
     &     CHF_CONST_REAL[bxwid],
     &     CHF_CONST_REAL[outr],
     &     CHF_CONST_INT[n],
     &     CHF_CONST_INT[kk])

#if CH_SPACEDIM == 3
      REAL_T besjn
#endif

#if CH_SPACEDIM == 3
      funmax = besjn(n, kk*outr) * exp(kk*half*bxwid)
#else
      funmax = outr**n
#endif

      return
      end
