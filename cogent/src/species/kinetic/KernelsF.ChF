#include "CONSTANTS.H"

      subroutine compute_vel_cell(
     &     CHF_FRA[velCell],
     &     CHF_FRA[velFace],
     &     CHF_CONST_INT[dir],
     &     CHF_BOX[gridbox]
     &     )

c     //This is the second-order calculation (same as in EdgeToCell, BoxTools Chombo)
c     //Should make it fourth order 
c     local variables
      integer CHF_DDECL[i;j;k;l;m], CHF_DDECL[ii;jj;kk;ll;mm], cfg_dim, comp
      double precision fac

#if CH_SPACEDIM==4
      cfg_dim = 2
      fac = 1.0/4.0
#else
      cfg_dim = 3
      fac = 1.0/6.0	
#endif

      CHF_DTERM[
      ii = CHF_ID(0,dir);
      jj = CHF_ID(1,dir);
      kk = CHF_ID(2,dir);
      ll = CHF_ID(3,dir);
      mm = CHF_ID(4,dir)]

      CHF_MULTIDO[gridbox;i;j;k;l;m]

         do comp = 0, cfg_dim - 1

           velCell(CHF_IX[i;j;k;l;m],comp) = velCell(CHF_IX[i;j;k;l;m],comp) 
     &                                     + fac * velFace(CHF_IX[i;j;k;l;m],comp)
     &                                     + fac * velFace(CHF_IX[i+ ii;j+ jj;k+ kk;l+ ll;m+ mm],comp) 
         
         enddo
             
      CHF_ENDDO

      return
      end



      subroutine compute_perp_vel(
     &     CHF_BOX[box],
     &     CHF_FRA[result],
     &     CHF_CONST_FRA1[dfn],
     &     CHF_CONST_FRA[gkVel],
     &     CHF_CONST_FRA[velCoords],
     &     CHF_CONST_FRA[b]
     &     )

c     local variables
      integer CHF_DDECL[i;j;k;l;m] 
      double precision bR, bphi, bZ, vpar_R, vpar_Phi, vpar_Z, vperp_R, vperp_Phi, vperp_Z 

      CHF_MULTIDO[box;i;j;k;l;m]

#if CH_SPACEDIM==4

          bR = b(i,j,CHF_LBOUND[b;2],CHF_LBOUND[b;3],0) 
          bZ = b(i,j,CHF_LBOUND[b;2],CHF_LBOUND[b;3],2) 
    
          vpar_R = velCoords(CHF_IX[i;j;k;l;m],0) * bR
          vpar_Z = velCoords(CHF_IX[i;j;k;l;m],0) * bZ

          vperp_R =  gkVel(CHF_IX[i;j;k;l;m],0) - vpar_R    
          vperp_Z =  gkVel(CHF_IX[i;j;k;l;m],1) - vpar_Z
          
          result(CHF_IX[i;j;k;l;m],0) = vperp_R * dfn(CHF_IX[i;j;k;l;m])
          result(CHF_IX[i;j;k;l;m],1) = vperp_Z * dfn(CHF_IX[i;j;k;l;m])


#else        

          bR = b(i,j,k,CHF_LBOUND[b;2],CHF_LBOUND[b;3],0) 
          bZ = b(i,j,k,CHF_LBOUND[b;2],CHF_LBOUND[b;3],2)
          bphi =  b(i,j,k,CHF_LBOUND[b;2],CHF_LBOUND[b;3],1)

          vpar_R   = velCoords(CHF_IX[i;j;k;l;m],0) * bR
          vpar_Phi = velCoords(CHF_IX[i;j;k;l;m],0) * bPhi
          vpar_Z   = velCoords(CHF_IX[i;j;k;l;m],0) * bZ

          vperp_R   =  gkVel(CHF_IX[i;j;k;l;m],0) - vpar_R    
          vperp_Phi =  gkVel(CHF_IX[i;j;k;l;m],1) - vpar_Phi
          vperp_Z   =  gkVel(CHF_IX[i;j;k;l;m],2) - vpar_Z

          result(CHF_IX[i;j;k;l;m],0) = vperp_R   * dfn(CHF_IX[i;j;k;l;m])
          result(CHF_IX[i;j;k;l;m],1) = vperp_Phi * dfn(CHF_IX[i;j;k;l;m])
          result(CHF_IX[i;j;k;l;m],2) = vperp_Z   * dfn(CHF_IX[i;j;k;l;m])

#endif

      CHF_ENDDO

      return
      end

      subroutine compute_par_mom(
     &     CHF_FRA[result],
     &     CHF_CONST_FRA1[parVel],
     &     CHF_BOX[gridbox]
     &     )

c     local variables
      integer CHF_DDECL[i;j;k;l;m], comp

      CHF_MULTIDO[gridbox;i;j;k;l;m]

         do comp = 0, CHF_NCOMP[result]-1

           result(CHF_IX[i;j;k;l;m],comp) = result(CHF_IX[i;j;k;l;m],comp) * parVel(CHF_IX[i;j;k;l;m])

         enddo

      CHF_ENDDO

      return
      end


      subroutine compute_pressure(
     &     CHF_FRA[result],
     &     CHF_CONST_FRA[velCoords],
     &     CHF_CONST_FRA1[vparShift],
     &     CHF_CONST_FRA1[B],
     &     CHF_CONST_REAL[mass],
     &     CHF_BOX[gridbox]
     &     )

c     local variables
      integer CHF_DDECL[i;j;k;l;m], comp
      double precision vperp2, vparLoc, v2

      CHF_MULTIDO[gridbox;i;j;k;l;m]

#if CH_SPACEDIM==4
         vperp2 = velCoords(CHF_IX[i;j;k;l;m],1) * B(i,j,CHF_LBOUND[b;2],CHF_LBOUND[b;3])
         vparLoc = velCoords(CHF_IX[i;j;k;l;m],0) - vparShift(i,j,CHF_LBOUND[vparShift;2],CHF_LBOUND[vparShift;3])
#else
         vperp2 = velCoords(CHF_IX[i;j;k;l;m],1) * B(i,j,k,CHF_LBOUND[b;3],CHF_LBOUND[b;4])
         vparLoc = velCoords(CHF_IX[i;j;k;l;m],0) - vparShift(i,j,k,CHF_LBOUND[vparShift;3],CHF_LBOUND[vparShift;4])
#endif

         v2 = mass * vparLoc**2 + vperp2	 

         do comp = 0, CHF_NCOMP[result]-1

           result(CHF_IX[i;j;k;l;m],comp) = result(CHF_IX[i;j;k;l;m],comp) * v2 / 3.0

         enddo

      CHF_ENDDO

      return
      end


      subroutine compute_maxwellian(
     &     CHF_FRA[result],
     &     CHF_CONST_FRA[velCoords],
     &     CHF_CONST_FRA1[vparShift],
     &     CHF_CONST_FRA1[n],
     &     CHF_CONST_FRA1[T],
     &     CHF_CONST_FRA1[B],
     &     CHF_CONST_REAL[mass],
     &     CHF_BOX[gridbox]
     &     )

c     local variables
      integer CHF_DDECL[i;j;k;l;m], comp
      double precision v_parallel, mu, eparnorm, munorm, val, factor

      factor = sqrt(PI * (two/mass)**three);

      CHF_MULTIDO[gridbox;i;j;k;l;m]

         v_parallel = velCoords(CHF_IX[i;j;k;l;m],0)
         mu = velCoords(CHF_IX[i;j;k;l;m],1)
#if CH_SPACEDIM==4
         eparnorm = (one/two) * mass * (v_parallel-vparShift(i,j,CHF_LBOUND[vparShift;2],CHF_LBOUND[vparShift;3]))**two / T(i,j,CHF_LBOUND[T;2],CHF_LBOUND[T;3])
         munorm   = (one/two) * B(i,j,CHF_LBOUND[b;2],CHF_LBOUND[b;3]) * mu / T(i,j,CHF_LBOUND[T;2],CHF_LBOUND[T;3])
         val      = exp( -( eparnorm + munorm ) )
         val    = val * n(i,j,CHF_LBOUND[n;2],CHF_LBOUND[n;3]) / ( factor * T(i,j,CHF_LBOUND[T;2],CHF_LBOUND[T;3])**(three/two) )
#else
         eparnorm = (one/two) * mass * (v_parallel-vparShift(i,j,k,CHF_LBOUND[vparShift;3],CHF_LBOUND[vparShift;4]))**two / T(i,j,k,CHF_LBOUND[T;3],CHF_LBOUND[T;4])
         munorm   = (one/two) * B(i,j,k,CHF_LBOUND[b;3],CHF_LBOUND[b;4]) * mu / T(i,j,k,CHF_LBOUND[T;3],CHF_LBOUND[T;4])
         val      = exp( -( eparnorm + munorm ) )
         val    = val * n(i,j,k,CHF_LBOUND[n;3],CHF_LBOUND[n;4]) / ( factor * T(i,j,k,CHF_LBOUND[T;3],CHF_LBOUND[T;4])**(three/two) )
#endif

         do comp = 0, CHF_NCOMP[result]-1

           result(CHF_IX[i;j;k;l;m],comp) = val

         enddo

      CHF_ENDDO

      return
      end
