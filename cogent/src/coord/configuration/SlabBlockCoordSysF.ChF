#include "CONSTANTS.H"

      subroutine get_slab_field_data(
     &     CHF_BOX[gridbox],
     &     CHF_CONST_FRA1[xix],
     &     CHF_CONST_REAL[ByInner],
     &     CHF_CONST_REAL[ByOuter],
     &     CHF_CONST_REAL[BzInner],
     &     CHF_CONST_REAL[BzOuter],
     &     CHF_CONST_REAL[xmax],
     &     CHF_CONST_REAL[ximax],
     &     CHF_FRA[b_pt],
     &     CHF_FRA1[Bmag_pt],
     &     CHF_FRA[bunit_pt],
     &     CHF_FRA[gradb_pt],
     &     CHF_FRA[curlb_pt],
     &     CHF_FRA1[bdotcurlb_pt]
     &     )

c     local variables
      integer CHF_AUTODECL[i], l
      double precision
     &     xi, Bz, By, BzBy, dBydx, dBzdx, Bmag, bunitDotcurlb,
     &     bunit(0:2), Bvec(0:2), gradB(0:2), curlb(0:2)


      dBydx = (ByOuter - ByInner)/xmax
      dBzdx = (BzOuter - BzInner)/xmax

      CHF_AUTOMULTIDO[gridbox;i]

c        Local value of computational xi
         xi = xix(CHF_AUTOIX[i])

         By = ByInner + dBydx * xi * (xmax/ximax) 
         Bz = BzInner + dBzdx * xi * (xmax/ximax)

         Bvec(0) = 0.
         Bvec(1) = By
         Bvec(2) = Bz

         Bmag = dsqrt(By*By + Bz*Bz)

         bunit(0) = 0.
         bunit(1) = By/Bmag
         bunit(2) = Bz/Bmag

         gradB(0) = (Bz*dBzdx + By*dBydx)/Bmag
         gradB(1) = zero
         gradB(2) = zero 

         curlb(0) = zero
         curlb(1) = -(By**2 * dBzdx - By*Bz*dBydx)/(Bmag**3)         
         curlb(2) =  (Bz**2 * dBydx - Bz*By*dBzdx)/(Bmag**3)         

         if (curlb(1)**2 + curlb(2)**2 .gt. 1.0e-10) then
           bunitDotcurlb = bunit(1) * curlb(1) + bunit(2) * curlb(2) 
           bunitDotcurlb = bunitDotcurlb / dsqrt(curlb(1)**2 + curlb(2)**2)
	 else
           bunitDotcurlb = zero
         endif
	 
         Bmag_pt(CHF_AUTOIX[i]) = Bmag
         bdotcurlb_pt(CHF_AUTOIX[i]) = bunitDotcurlb

         do l = 0, 2
            bunit_pt(CHF_AUTOIX[i],l) = bunit(l)
            b_pt(CHF_AUTOIX[i],l)     = Bvec(l)
            gradb_pt(CHF_AUTOIX[i],l) = gradB(l)
            curlb_pt(CHF_AUTOIX[i],l) = curlb(l)
         end do


      CHF_ENDDO

      return
      end
