#include "CONSTANTS.H"

      subroutine fourth_order_outflow_bc(
     &     CHF_FRA[f],
     &     CHF_BOX[bdrybox],
     &     CHF_CONST_FRA[vn],
     &     CHF_CONST_INT[idir],
     &     CHF_CONST_INT[iside]
     &     )
c
      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      integer CHF_AUTODECL[iii]
      integer CHF_AUTODECL[iv]
      integer CHF_AUTODECL[ibeg]
      integer CHF_AUTODECL[ng]
      integer isign
      integer n,d,ng(0:CH_SPACEDIM-1)
c
      isign = 2*iside-1
c
      CHF_AUTOID[iii;idir;isign]
c
c
      CHF_DTERM[
      ng0 = CHF_UBOUND[bdrybox;0]-CHF_LBOUND[bdrybox;0]+1;
      ng1 = CHF_UBOUND[bdrybox;1]-CHF_LBOUND[bdrybox;1]+1;
      ng2 = CHF_UBOUND[bdrybox;2]-CHF_LBOUND[bdrybox;2]+1;
      ng3 = CHF_UBOUND[bdrybox;3]-CHF_LBOUND[bdrybox;3]+1;
      ng4 = CHF_UBOUND[bdrybox;4]-CHF_LBOUND[bdrybox;4]+1]
c
      CHF_DTERM[
      ibeg0 = ibdryboxlo0+CHF_ID(idir,0)*(1-iside)*ng0;
      ibeg1 = ibdryboxlo1+CHF_ID(idir,1)*(1-iside)*ng1;
      ibeg2 = ibdryboxlo2+CHF_ID(idir,2)*(1-iside)*ng2;
      ibeg3 = ibdryboxlo3+CHF_ID(idir,3)*(1-iside)*ng3;
      ibeg4 = ibdryboxlo4+CHF_ID(idir,4)*(1-iside)*ng4]
c
      do n=0,nfcomp-1
      CHF_AUTOMULTIDO[bdrybox;i]
c
        CHF_DTERM[
        iv0 = i0+CHF_ID(idir,0)*(ibeg0-i0);
        iv1 = i1+CHF_ID(idir,1)*(ibeg1-i1);
        iv2 = i2+CHF_ID(idir,2)*(ibeg2-i2);
        iv3 = i3+CHF_ID(idir,3)*(ibeg3-i3);
        iv4 = i4+CHF_ID(idir,4)*(ibeg4-i4)]
c
c Check for outflow; if so, extrapolate out
c
        if ( isign*vn(CHF_AUTOIX[iv],0).ge.zero ) then
c
          CHF_DTERM[
          ii0 = i0+CHF_ID(idir,0)*(iside-1)*(2*(i0-ibeg0)+ng0+1);
          ii1 = i1+CHF_ID(idir,1)*(iside-1)*(2*(i1-ibeg1)+ng1+1);
          ii2 = i2+CHF_ID(idir,2)*(iside-1)*(2*(i2-ibeg2)+ng2+1);
          ii3 = i3+CHF_ID(idir,3)*(iside-1)*(2*(i3-ibeg3)+ng3+1);
          ii4 = i4+CHF_ID(idir,4)*(iside-1)*(2*(i4-ibeg4)+ng4+1)]
c

c         A second order option for experimental purposes
c          f(CHF_IX[ii;jj;kk;ll],n) = 
c     &                   2*f(CHF_IX[ii-  i1;jj-  j1;kk-  k1;ll-  l1],n)
c     &                 - 1*f(CHF_IX[ii-2*i1;jj-2*j1;kk-2*k1;ll-2*l1],n)

          f(CHF_AUTOIX[ii],n) =
     &                   4*f(CHF_IX[ii0-  iii0;ii1-  iii1;ii2-  iii2;ii3-  iii3;ii4-  iii4],n)
     &                 - 6*f(CHF_IX[ii0-2*iii0;ii1-2*iii1;ii2-2*iii2;ii3-2*iii3;ii4-2*iii4],n)
     &                 + 4*f(CHF_IX[ii0-3*iii0;ii1-3*iii1;ii2-3*iii2;ii3-3*iii3;ii4-3*iii4],n)
     &                 - 1*f(CHF_IX[ii0-4*iii0;ii1-4*iii1;ii2-4*iii2;ii3-4*iii3;ii4-4*iii4],n)

c         Using CHF_OFFSETIX  macro
c          f(CHF_AUTOIX[ii],n) =
c     &                   4*f(CHF_OFFSETIX[ii;-1*iii],n)
c     &                 - 6*f(CHF_OFFSETIX[ii;-2*iii],n)
c     &                 + 4*f(CHF_OFFSETIX[ii;-3*iii],n)
c     &                 - 1*f(CHF_OFFSETIX[ii;-4*iii],n)



        endif
c
      CHF_ENDDO
      enddo
c
      return
      end


      subroutine fourth_order_neumann_bc(
     &     CHF_FRA[f],
     &     CHF_BOX[bdrybox],
     &     CHF_CONST_INTVECT[ng],
     &     CHF_CONST_INT[idir],
     &     CHF_CONST_INT[iside]
     &     )
c
      integer CHF_DDECL[i;j;k;l;m]
      integer CHF_DDECL[is;js;ks;ls;ms]
      integer CHF_DDECL[ibeg0;ibeg1;ibeg2;ibeg3;ibeg4]
      integer n
      integer isign
c
      isign = 2*iside-1

      CHF_DTERM[
      ibeg0 = ibdryboxlo0+CHF_ID(idir,0)*((1-iside)*(ng(0)+1)-1);
      ibeg1 = ibdryboxlo1+CHF_ID(idir,1)*((1-iside)*(ng(1)+1)-1);
      ibeg2 = ibdryboxlo2+CHF_ID(idir,2)*((1-iside)*(ng(2)+1)-1);
      ibeg3 = ibdryboxlo3+CHF_ID(idir,3)*((1-iside)*(ng(3)+1)-1);
      ibeg4 = ibdryboxlo4+CHF_ID(idir,4)*((1-iside)*(ng(4)+1)-1)]
c
      do n=0,nfcomp-1
      CHF_MULTIDO[bdrybox;i;j;k;l;m]
c
        CHF_DTERM[
        is = i + CHF_ID(idir,0)*(2*(ibeg0-i)+isign);
        js = j + CHF_ID(idir,1)*(2*(ibeg1-j)+isign);
        ks = k + CHF_ID(idir,2)*(2*(ibeg2-k)+isign);
        ls = l + CHF_ID(idir,3)*(2*(ibeg3-l)+isign);
        ms = m + CHF_ID(idir,4)*(2*(ibeg4-m)+isign)]
c
        f(CHF_IX[i;j;k;l;m],n) = f(CHF_IX[is;js;ks;ls;ms],n)
c
      CHF_ENDDO
      enddo
c
      return
      end

      subroutine fourth_order_dirichlet_bc(
     &     CHF_FRA[f],
     &     CHF_BOX[bdrybox],
     &     CHF_CONST_INTVECT[ng],
     &     CHF_CONST_FRA[val],
     &     CHF_CONST_INT[idir],
     &     CHF_CONST_INT[iside]
     &     )
c
      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      integer CHF_AUTODECL[iii]
      integer CHF_AUTODECL[iv]
      integer CHF_AUTODECL[ibeg]
      integer isign, gn(0:CH_SPACEDIM-1)
      integer n
      REAL_T thirteen
c
      parameter (thirteen=13.d0)
c
      isign = 2*iside-1
c
      CHF_AUTOID[iii;idir;isign]
c
      CHF_DTERM[
      ibeg0 = CHF_LBOUND[bdrybox;0]+CHF_ID(idir,0)*(1-iside)*ng(0);
      ibeg1 = CHF_LBOUND[bdrybox;1]+CHF_ID(idir,1)*(1-iside)*ng(1);
      ibeg2 = CHF_LBOUND[bdrybox;2]+CHF_ID(idir,2)*(1-iside)*ng(2);
      ibeg3 = CHF_LBOUND[bdrybox;3]+CHF_ID(idir,3)*(1-iside)*ng(3);
      ibeg4 = CHF_LBOUND[bdrybox;4]+CHF_ID(idir,4)*(1-iside)*ng(4)]
c
      do n=0,nfcomp-1
      CHF_AUTOMULTIDO[bdrybox;i]
c
        CHF_DTERM[
        iv0 = i0+CHF_ID(idir,0)*(ibeg0-i0);
        iv1 = i1+CHF_ID(idir,1)*(ibeg1-i1);
        iv2 = i2+CHF_ID(idir,2)*(ibeg2-i2);
        iv3 = i3+CHF_ID(idir,3)*(ibeg3-i3);
        iv4 = i4+CHF_ID(idir,4)*(ibeg4-i4)]
c
        CHF_DTERM[
        ii0 = i0+CHF_ID(idir,0)*(iside-1)*(2*i0+ng(0)+1);
        ii1 = i1+CHF_ID(idir,1)*(iside-1)*(2*i1+ng(1)+1);
        ii2 = i2+CHF_ID(idir,2)*(iside-1)*(2*i2+ng(2)+1);
        ii3 = i3+CHF_ID(idir,3)*(iside-1)*(2*i3+ng(3)+1);
        ii4 = i4+CHF_ID(idir,4)*(iside-1)*(2*i4+ng(4)+1)]
c
        CHF_DTERM[
        gn(0) = ii0-ibeg0;
        gn(1) = ii1-ibeg1;
        gn(2) = ii2-ibeg2;
        gn(3) = ii3-ibeg3;
        gn(4) = ii4-ibeg4]
c
        if (gn(idir).eq.1) then
c
          f(CHF_AUTOIX[ii],n) =
     *        third * (+ twelve   * val(CHF_AUTOIX[iv],n)
     &                 - thirteen * f(CHF_OFFSETIX[ii;-1*iii],n)
     &                 + five     * f(CHF_OFFSETIX[ii;-2*iii],n)
     &                 - one      * f(CHF_OFFSETIX[ii;-3*iii],n))
c
        else if (gn(idir).eq.2) then
c
          f(CHF_AUTOIX[ii],n) =
     &                 + seven  * f(CHF_OFFSETIX[ii;-1*iii],n)
     &                 - twelve * val(CHF_AUTOIX[iv],n)
     &                 + seven  * f(CHF_OFFSETIX[ii;-2*iii],n)
     &                 - one    * f(CHF_OFFSETIX[ii;-3*iii],n)
c
        else if (gn(idir).eq.3) then
c
          f(CHF_AUTOIX[ii],n) =
     &                 + five     * f(CHF_OFFSETIX[ii;-1*iii],n)
     &                 - thirteen * f(CHF_OFFSETIX[ii;-2*iii],n)
     *                 + twelve   * val(CHF_AUTOIX[iv],n)
     &                 - three    * f(CHF_OFFSETIX[ii;-3*iii],n)
c
        else
c
          f(CHF_AUTOIX[ii],n) =
     &                   four * f(CHF_OFFSETIX[ii;-1*iii],n)
     &                 - six  * f(CHF_OFFSETIX[ii;-2*iii],n)
     &                 + four * f(CHF_OFFSETIX[ii;-3*iii],n)
     &                 - one  * f(CHF_OFFSETIX[ii;-4*iii],n)
c
        endif
c
c
      CHF_ENDDO
      enddo
c
      return
      end

      subroutine second_order_dirichlet_bc(
     &     CHF_FRA[f],
     &     CHF_BOX[bdrybox],
     &     CHF_CONST_INT[idir],
     &     CHF_CONST_INT[iside]
     &     )
c
      integer CHF_DDECL[i;j;k;l;m]
      integer CHF_DDECL[ii;jj;kk;ll;mm]
      integer CHF_DDECL[i1;j1;k1;l1;m1]
      integer CHF_DDECL[iv0;iv1;iv2;iv3;iv4]
      integer CHF_DDECL[ibeg0;ibeg1;ibeg2;ibeg3;ibeg4]
      integer CHF_DDECL[ng0;ng1;ng2;ng3;ng4]
      integer isign
      integer n,d,ng(0:CH_SPACEDIM-1),gn(0:CH_SPACEDIM-1)
      double precision val(0:nfcomp-1)
      
c
      isign = 2*iside-1
c
      CHF_DTERM[
      i1 = isign * CHF_ID(idir,0);
      j1 = isign * CHF_ID(idir,1);
      k1 = isign * CHF_ID(idir,2);
      l1 = isign * CHF_ID(idir,3);
      m1 = isign * CHF_ID(idir,4)]
c
      CHF_DTERM[
      ng0 = CHF_UBOUND[bdrybox;0]-CHF_LBOUND[bdrybox;0];
      ng1 = CHF_UBOUND[bdrybox;1]-CHF_LBOUND[bdrybox;1];
      ng2 = CHF_UBOUND[bdrybox;2]-CHF_LBOUND[bdrybox;2];
      ng3 = CHF_UBOUND[bdrybox;3]-CHF_LBOUND[bdrybox;3];
      ng4 = CHF_UBOUND[bdrybox;4]-CHF_LBOUND[bdrybox;4]]
c
c     *** ibeg - index of the first cell outside the boundary
      CHF_DTERM[
      ibeg0 = ibdryboxlo0+CHF_ID(idir,0)*(1-iside)*ng0;
      ibeg1 = ibdryboxlo1+CHF_ID(idir,1)*(1-iside)*ng1;
      ibeg2 = ibdryboxlo2+CHF_ID(idir,2)*(1-iside)*ng2;
      ibeg3 = ibdryboxlo3+CHF_ID(idir,3)*(1-iside)*ng3;
      ibeg4 = ibdryboxlo4+CHF_ID(idir,4)*(1-iside)*ng4]
c
      do n=0,nfcomp-1
      CHF_MULTIDO[bdrybox;i;j;k;l;m]
c
        CHF_DTERM[
        iv0 = i+CHF_ID(idir,0)*(ibeg0-i);
        iv1 = j+CHF_ID(idir,1)*(ibeg1-j);
        iv2 = k+CHF_ID(idir,2)*(ibeg2-k);
        iv3 = l+CHF_ID(idir,3)*(ibeg3-l);
        iv4 = m+CHF_ID(idir,4)*(ibeg4-m)]

c     *** compute the boundary face value
        val(n) = (three/two)*f(CHF_IX[iv0;iv1;iv2;iv3;iv4],n) - (one/two)*f(CHF_IX[iv0+i1;iv1+j1;iv2+k1;iv3+l1;iv4+m1],n)

        CHF_DTERM[
        ii = i+CHF_ID(idir,0)*(iside-1)*(2*(i-ibeg0)+ng0);
        jj = j+CHF_ID(idir,1)*(iside-1)*(2*(j-ibeg1)+ng1);
        kk = k+CHF_ID(idir,2)*(iside-1)*(2*(k-ibeg2)+ng2);
        ll = l+CHF_ID(idir,3)*(iside-1)*(2*(l-ibeg3)+ng3);
        mm = m+CHF_ID(idir,4)*(iside-1)*(2*(m-ibeg4)+ng4);]

        CHF_DTERM[
        gn(0) = iabs(ii-ibeg0);
        gn(1) = iabs(jj-ibeg1);
        gn(2) = iabs(kk-ibeg2);
        gn(3) = iabs(ll-ibeg3);
        gn(4) = iabs(mm-ibeg4)]

        f(CHF_IX[ii;jj;kk;ll;mm],n) = two*(one + gn(idir)) * val(n) 
     &      - (one + two * gn(idir)) * f(CHF_IX[iv0-i1;iv1-j1;iv2-k1;iv3-l1;iv4-m1],n)


      CHF_ENDDO
      enddo
c
      return
      end
