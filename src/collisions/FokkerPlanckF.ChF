#include "CONSTANTS.H"

      subroutine evaluate_flux_cell(
     &     CHF_FRA[flux],
     &     CHF_FRA1[f],
     &     CHF_CONST_FRA[D],
     &     CHF_BOX[gridbox],
     &     CHF_CONST_REALVECT[dx],
     &     CHF_CONST_INT[Nvpar],
     &     CHF_CONST_INT[Nmu]
     &     )

c     local variables
      integer CHF_DDECL[i;j;k;l]
      double precision f_v, f_mu
      double precision D_v, D_mu, D_mu_v, D_v_mu, D_v_v, D_mu_mu

      CHF_MULTIDO[gridbox;i;j;k;l]

       f_v = (1.0d0/12.0d0/dx(0))*(8.0d0*(f(CHF_IX[i;j;k+1;l])-f(CHF_IX[i;j;k-1;l]))
     &                         -(f(CHF_IX[i;j;k+2;l])-f(CHF_IX[i;j;k-2;l])))
       
       f_mu = (1.0d0/12.0d0/dx(1))*(8.0d0*(f(CHF_IX[i;j;k;l+1])-f(CHF_IX[i;j;k;l-1]))
     &                         -(f(CHF_IX[i;j;k;l+2])-f(CHF_IX[i;j;k;l-2])))

c      ***Calculate one-sided 4-th order accurate derivatives at mu=0 bnd

        if ((l.eq.0) .or. (l.eq.1)) then
          f_mu = 1.0d0/dx(1)*(-25.0d0/12.0d0*f(CHF_IX[i;j;k;l])+4.0d0*f(CHF_IX[i;j;k;l+1])
     &           -3.0d0*f(CHF_IX[i;j;k;l+2])+4.0d0/3.0d0*f(CHF_IX[i;j;k;l+3])-1.0d0/4.0d0*f(CHF_IX[i;j;k;l+4]))
        endif

       D_v     = D(CHF_IX[i;j;k;l],0) ! = (mTP/mFP) * h_v
       D_mu    = D(CHF_IX[i;j;k;l],1) ! = 2.0d0 * (mTP/mFP) * mTP / b * mu * h_mu
       D_v_v   = D(CHF_IX[i;j;k;l],2) ! = -g_v_v
       D_v_mu  = D(CHF_IX[i;j;k;l],3) ! = -2.0d0 * mTP / b * mu * g_v_mu
       D_mu_v  = D(CHF_IX[i;j;k;l],3) ! = -2.0d0 * mTP / b * mu * g_v_mu
       D_mu_mu = D(CHF_IX[i;j;k;l],4) ! = -2.0d0 * mTP * mTP /(b*b) * mu * (2.0d0 * mu * g_mu_mu + g_mu)

       flux(CHF_IX[i;j;k;l],0) = D_v * f(CHF_IX[i;j;k;l]) + D_v_v * f_v + 2.0d0 * D_v_mu * f_mu
       flux(CHF_IX[i;j;k;l],1) = 2.0d0 * (D_mu * f(CHF_IX[i;j;k;l]) + D_mu_v * f_v + 2.0d0 * D_mu_mu * f_mu)

      CHF_ENDDO

      return

      end


      subroutine evaluate_flux_combined(
     &     CHF_FRA[fluxRHS],
     &     CHF_CONST_INT[dir],
     &     CHF_BOX[box],
     &     CHF_CONST_FRA[fluxFace],
     &     CHF_CONST_FRA[fluxCell],
     &     CHF_CONST_INT[Nvpar],
     &     CHF_CONST_INT[Nmu]
     &     )

c     local variables
      integer CHF_DDECL[i;j;k;l]
      double precision  dflux


      CHF_MULTIDO[box;i;j;k;l]

         fluxRHS(CHF_IX[i;j;k;l],0) = zero
         fluxRHS(CHF_IX[i;j;k;l],1) = zero
         fluxRHS(CHF_IX[i;j;k;l],2) = fluxFace(CHF_IX[i;j;k;l],0)
         fluxRHS(CHF_IX[i;j;k;l],3) = fluxFace(CHF_IX[i;j;k;l],1)


c        *** Low-mu boundary

         if (l.eq.0) then
          fluxRHS(CHF_IX[i;j;k;l],3) = 0.0
         endif

         if (l.eq.1) then
          fluxRHS(CHF_IX[i;j;k;l],3) = 1.0/4.0 * fluxCell(CHF_IX[i;j;k;l-1],1)
     &                               + 13.0/12.0 * fluxCell(CHF_IX[i;j;k;l],1)
     &                               - 5.0/12.0 * fluxCell(CHF_IX[i;j;k;l+1],1)
     &                               + 1.0/12.0 * fluxCell(CHF_IX[i;j;k;l+2],1)
         endif

c        *** Zero out fluxes at the domain bnds to avoid continous sink of particles
         if ((l.eq.0).or.(l.eq.Nmu)) then
          fluxRHS(CHF_IX[i;j;k;l],3) = 0.0
         endif

         if ((k.eq.-Nvpar/2).or.(k.eq.Nvpar/2)) then
          fluxRHS(CHF_IX[i;j;k;l],2) = 0.0
         endif


      CHF_ENDDO
      return
      end

      subroutine evaluate_coefficients(
     &     CHF_FRA[D],
     &     CHF_CONST_FRA[phi],
     &     CHF_CONST_FRA1[bmag],
     &     CHF_BOX[gridbox],
     &     CHF_CONST_REALVECT[dx],
     &     CHF_CONST_REAL[mTP],
     &     CHF_CONST_REAL[mFP],
     &     CHF_CONST_INT[Nvpar],
     &     CHF_CONST_INT[Nmu]
     &     )

c     local variables
      integer CHF_DDECL[i;j;k;l]
      double precision h_v, h_mu, g_v, g_mu, g_v_v, g_mu_mu, g_v_mu
      double precision g_v_lo1, g_v_lo2, g_v_lo3, g_v_lo4, g_v_hi1, g_v_hi2, g_v_hi3, g_v_hi4
      double precision mu, b, D_v, D_mu, D_v_mu, D_v_v, D_mu_mu

      CHF_MULTIDO[gridbox;i;j;k;l]

c      *** Calculate necessary phi derivatives; notation is used from Z. Xiong, JCP 2008
       
       h_v = (1.0d0/12.0d0/dx(0))*(8.0d0*(phi(CHF_IX[i;j;k+1;l],0)-phi(CHF_IX[i;j;k-1;l],0))
     &                         -(phi(CHF_IX[i;j;k+2;l],0)-phi(CHF_IX[i;j;k-2;l],0)))
       
       h_mu = (1.0d0/12.0d0/dx(1))*(8.0d0*(phi(CHF_IX[i;j;k;l+1],0)-phi(CHF_IX[i;j;k;l-1],0))
     &                         -(phi(CHF_IX[i;j;k;l+2],0)-phi(CHF_IX[i;j;k;l-2],0)))

       g_mu = (1.0d0/12.0d0/dx(1))*(8.0d0*(phi(CHF_IX[i;j;k;l+1],1)-phi(CHF_IX[i;j;k;l-1],1))
     &                         -(phi(CHF_IX[i;j;k;l+2],1)-phi(CHF_IX[i;j;k;l-2],1)))

       g_mu_mu =(1.0d0/12.0d0/dx(1)/dx(1))*(16.0d0*(phi(CHF_IX[i;j;k;l+1],1)+phi(CHF_IX[i;j;k;l-1],1))
     &       -(phi(CHF_IX[i;j;k;l+2],1)+phi(CHF_IX[i;j;k;l-2],1))-30.0d0*phi(CHF_IX[i;j;k;l],1))

       g_v_v =(1.0d0/12.0d0/dx(0)/dx(0))*(16.0d0*(phi(CHF_IX[i;j;k+1;l],1)+phi(CHF_IX[i;j;k-1;l],1))
     &       -(phi(CHF_IX[i;j;k+2;l],1)+phi(CHF_IX[i;j;k-2;l],1))-30.0d0*phi(CHF_IX[i;j;k;l],1))
       

c      *** Calculating mixed derivative 

       g_v = (1.0d0/12.0d0/dx(0))*(8.0d0*(phi(CHF_IX[i;j;k+1;l],1)-phi(CHF_IX[i;j;k-1;l],1))
     &                       -(phi(CHF_IX[i;j;k+2;l],1)-phi(CHF_IX[i;j;k-2;l],1)))

       g_v_lo2 = (1.0d0/12.0d0/dx(0))*(8.0d0*(phi(CHF_IX[i;j;k+1;l-2],1)-phi(CHF_IX[i;j;k-1;l-2],1))
     &                       -(phi(CHF_IX[i;j;k+2;l-2],1)-phi(CHF_IX[i;j;k-2;l-2],1)))

       g_v_hi2 = (1.0d0/12.0d0/dx(0))*(8.0d0*(phi(CHF_IX[i;j;k+1;l+2],1)-phi(CHF_IX[i;j;k-1;l+2],1))
     &                       -(phi(CHF_IX[i;j;k+2;l+2],1)-phi(CHF_IX[i;j;k-2;l+2],1)))

       g_v_lo1 = (1.0d0/12.0d0/dx(0))*(8.0d0*(phi(CHF_IX[i;j;k+1;l-1],1)-phi(CHF_IX[i;j;k-1;l-1],1))
     &                       -(phi(CHF_IX[i;j;k+2;l-1],1)-phi(CHF_IX[i;j;k-2;l-1],1)))

       g_v_hi1 = (1.0d0/12.0d0/dx(0))*(8.0d0*(phi(CHF_IX[i;j;k+1;l+1],1)-phi(CHF_IX[i;j;k-1;l+1],1))
     &                       -(phi(CHF_IX[i;j;k+2;l+1],1)-phi(CHF_IX[i;j;k-2;l+1],1)))

       g_v_mu = (1.0d0/12.0d0/dx(1))*(8.0d0 * g_v_hi1 - 8.0d0 * g_v_lo1 - g_v_hi2 + g_v_lo2 )


c      ***Calculate one-sided 4-th order accurate derivatives at vpar_lo bnd

        if ((k.eq.-Nvpar/2).or.(k.eq.(-Nvpar/2+1))) then

          g_v  = 1.0d0/dx(0)*(-25.0d0/12.0d0*phi(CHF_IX[i;j;k;l],1)+4.0d0*phi(CHF_IX[i;j;k+1;l],1)
     &              -3.0d0*phi(CHF_IX[i;j;k+2;l],1)+4.0d0/3.0d0*phi(CHF_IX[i;j;k+3;l],1)-1.0d0/4.0d0*phi(CHF_IX[i;j;k+4;l],1))

          g_v_lo1 = 1.0d0/dx(0)*(-25.0d0/12.0d0*phi(CHF_IX[i;j;k;l-1],1)+4.0d0*phi(CHF_IX[i;j;k+1;l-1],1)
     &              -3.0d0*phi(CHF_IX[i;j;k+2;l-1],1)+4.0d0/3.0d0*phi(CHF_IX[i;j;k+3;l-1],1)-1.0d0/4.0d0*phi(CHF_IX[i;j;k+4;l-1],1))

          g_v_hi1 = 1.0d0/dx(0)*(-25.0d0/12.0d0*phi(CHF_IX[i;j;k;l+1],1)+4.0d0*phi(CHF_IX[i;j;k+1;l+1],1)
     &              -3.0d0*phi(CHF_IX[i;j;k+2;l+1],1)+4.0d0/3.0d0*phi(CHF_IX[i;j;k+3;l+1],1)-1.0d0/4.0d0*phi(CHF_IX[i;j;k+4;l+1],1))

          g_v_lo2 = 1.0d0/dx(0)*(-25.0d0/12.0d0*phi(CHF_IX[i;j;k;l-2],1)+4.0d0*phi(CHF_IX[i;j;k+1;l-2],1)
     &              -3.0d0*phi(CHF_IX[i;j;k+2;l-2],1)+4.0d0/3.0d0*phi(CHF_IX[i;j;k+3;l-2],1)-1.0d0/4.0d0*phi(CHF_IX[i;j;k+4;l-2],1))

          g_v_hi2 = 1.0d0/dx(0)*(-25.0d0/12.0d0*phi(CHF_IX[i;j;k;l+2],1)+4.0d0*phi(CHF_IX[i;j;k+1;l+2],1)
     &              -3.0d0*phi(CHF_IX[i;j;k+2;l+2],1)+4.0d0/3.0d0*phi(CHF_IX[i;j;k+3;l+2],1)-1.0d0/4.0d0*phi(CHF_IX[i;j;k+4;l+2],1))


          g_v_mu = (1.0d0/12.0d0/dx(1))*(8.0d0 * g_v_hi1 - 8.0d0 * g_v_lo1 - g_v_hi2 + g_v_lo2 )
       
          
        endif

c      ***Calculate one-sided 4-th order accurate derivatives at vpar_hi bnd

        if ((k.eq.(Nvpar/2-1)).or.(k.eq.(Nvpar/2-2))) then

          g_v  = 1.0d0/dx(0)*(25.0d0/12.0d0*phi(CHF_IX[i;j;k;l],1)-4.0d0*phi(CHF_IX[i;j;k-1;l],1)
     &              +3.0d0*phi(CHF_IX[i;j;k-2;l],1)-4.0d0/3.0d0*phi(CHF_IX[i;j;k-3;l],1)+1.0d0/4.0d0*phi(CHF_IX[i;j;k-4;l],1))

          g_v_lo1 = 1.0d0/dx(0)*(25.0d0/12.0d0*phi(CHF_IX[i;j;k;l-1],1)-4.0d0*phi(CHF_IX[i;j;k-1;l-1],1)
     &              +3.0d0*phi(CHF_IX[i;j;k-2;l-1],1)-4.0d0/3.0d0*phi(CHF_IX[i;j;k-3;l-1],1)+1.0d0/4.0d0*phi(CHF_IX[i;j;k-4;l-1],1))

          g_v_hi1 = 1.0d0/dx(0)*(25.0d0/12.0d0*phi(CHF_IX[i;j;k;l+1],1)-4.0d0*phi(CHF_IX[i;j;k-1;l+1],1)
     &              +3.0d0*phi(CHF_IX[i;j;k-2;l+1],1)-4.0d0/3.0d0*phi(CHF_IX[i;j;k-3;l+1],1)+1.0d0/4.0d0*phi(CHF_IX[i;j;k-4;l+1],1))

          g_v_lo2 = 1.0d0/dx(0)*(25.0d0/12.0d0*phi(CHF_IX[i;j;k;l-2],1)-4.0d0*phi(CHF_IX[i;j;k-1;l-2],1)
     &              +3.0d0*phi(CHF_IX[i;j;k-2;l-2],1)-4.0d0/3.0d0*phi(CHF_IX[i;j;k-3;l-2],1)+1.0d0/4.0d0*phi(CHF_IX[i;j;k-4;l-2],1))

          g_v_hi2 = 1.0d0/dx(0)*(25.0d0/12.0d0*phi(CHF_IX[i;j;k;l+2],1)-4.0d0*phi(CHF_IX[i;j;k-1;l+2],1)
     &              +3.0d0*phi(CHF_IX[i;j;k-2;l+2],1)-4.0d0/3.0d0*phi(CHF_IX[i;j;k-3;l+2],1)+1.0d0/4.0d0*phi(CHF_IX[i;j;k-4;l+2],1))



       g_v_mu = (1.0d0/12.0d0/dx(1))*(8.0d0 * g_v_hi1 - 8.0d0 * g_v_lo1 - g_v_hi2 + g_v_lo2 )
       
          
        endif


c      ***Calculate one-sided 4-th order accurate derivatives at mu=0 bnd

        if ((l.eq.0) .or. (l.eq.1)) then

       
          h_mu = 1.0d0/dx(1)*(-25.0d0/12.0d0*phi(CHF_IX[i;j;k;l],0)+4.0d0*phi(CHF_IX[i;j;k;l+1],0)
     &           -3.0d0*phi(CHF_IX[i;j;k;l+2],0)+4.0d0/3.0d0*phi(CHF_IX[i;j;k;l+3],0)-1.0d0/4.0d0*phi(CHF_IX[i;j;k;l+4],0))

          g_mu = 1.0d0/dx(1)*(-25.0d0/12.0d0*phi(CHF_IX[i;j;k;l],1)+4.0d0*phi(CHF_IX[i;j;k;l+1],1)
     &           -3.0d0*phi(CHF_IX[i;j;k;l+2],1)+4.0d0/3.0d0*phi(CHF_IX[i;j;k;l+3],1)-1.0d0/4.0d0*phi(CHF_IX[i;j;k;l+4],1))
          
          g_mu_mu = 1.0d0/dx(1)/dx(1)*(15.0d0/4.0d0*phi(CHF_IX[i;j;k;l],1)-77.0d0/6.0d0*phi(CHF_IX[i;j;k;l+1],1)+107.0d0/6.0d0*phi(CHF_IX[i;j;k;l+2],1)
     &             -13.0d0*phi(CHF_IX[i;j;k;l+3],1)+61.0d0/12.0d0*phi(CHF_IX[i;j;k;l+4],1)-5.0d0/6.0d0*phi(CHF_IX[i;j;k;l+5],1))


          if ((k.gt.(-Nvpar/2+1)).and.(k.lt.(Nvpar/2-2))) then
             
            g_v_hi3 = (1.0d0/12.0d0/dx(0))*(8.0d0*(phi(CHF_IX[i;j;k+1;l+3],1)-phi(CHF_IX[i;j;k-1;l+3],1))
     &                         -(phi(CHF_IX[i;j;k+2;l+3],1)-phi(CHF_IX[i;j;k-2;l+3],1)))

            g_v_hi4 = (1.0d0/12.0d0/dx(0))*(8.0d0*(phi(CHF_IX[i;j;k+1;l+4],1)-phi(CHF_IX[i;j;k-1;l+4],1))
     &                         -(phi(CHF_IX[i;j;k+2;l+4],1)-phi(CHF_IX[i;j;k-2;l+4],1)))

          else if ((k.eq.(Nvpar/2-1)).or.(k.eq.(Nvpar/2-2))) then

            g_v_hi3 = 1.0d0/dx(0)*(25.0d0/12.0d0*phi(CHF_IX[i;j;k;l+3],1)-4.0d0*phi(CHF_IX[i;j;k-1;l+3],1)
     &              +3.0d0*phi(CHF_IX[i;j;k-2;l+3],1)-4.0d0/3.0d0*phi(CHF_IX[i;j;k-3;l+3],1)+1.0d0/4.0d0*phi(CHF_IX[i;j;k-4;l+3],1))

            g_v_hi4 = 1.0d0/dx(0)*(25.0d0/12.0d0*phi(CHF_IX[i;j;k;l+4],1)-4.0d0*phi(CHF_IX[i;j;k-1;l+4],1)
     &              +3.0d0*phi(CHF_IX[i;j;k-2;l+4],1)-4.0d0/3.0d0*phi(CHF_IX[i;j;k-3;l+4],1)+1.0d0/4.0d0*phi(CHF_IX[i;j;k-4;l+4],1))

          else  

            g_v_hi3 = 1.0d0/dx(0)*(-25.0d0/12.0d0*phi(CHF_IX[i;j;k;l+3],1)+4.0d0*phi(CHF_IX[i;j;k+1;l+3],1)
     &              -3.0d0*phi(CHF_IX[i;j;k+2;l+3],1)+4.0d0/3.0d0*phi(CHF_IX[i;j;k+3;l+3],1)-1.0d0/4.0d0*phi(CHF_IX[i;j;k+4;l+3],1))
  
            g_v_hi4 = 1.0d0/dx(0)*(-25.0d0/12.0d0*phi(CHF_IX[i;j;k;l+4],1)+4.0d0*phi(CHF_IX[i;j;k+1;l+4],1)
     &              -3.0d0*phi(CHF_IX[i;j;k+2;l+4],1)+4.0d0/3.0d0*phi(CHF_IX[i;j;k+3;l+4],1)-1.0d0/4.0d0*phi(CHF_IX[i;j;k+4;l+4],1))

          endif
       

          g_v_mu = (1.0d0/dx(1))*(-25.0d0/12.0d0 * g_v + 4.0d0 * g_v_hi1 - 3.0d0 * g_v_hi2 
     &                            + 4.0d0/3.0d0 * g_v_hi3 -1.0d0/4.0d0 *g_v_hi4)
          
        endif



c      ***Calculate one-sided 4-th order accurate derivatives at hi_mu bnd

        if ((l.eq.Nmu-1) .or. (l.eq.Nmu-2)) then

           h_mu = 1.0d0/dx(1)*(25.0d0/12.0d0*phi(CHF_IX[i;j;k;l],0)-4.0d0*phi(CHF_IX[i;j;k;l-1],0)
     &           +3.0d0*phi(CHF_IX[i;j;k;l-2],0)-4.0d0/3.0d0*phi(CHF_IX[i;j;k;l-3],0)+1.0d0/4.0d0*phi(CHF_IX[i;j;k;l-4],0))

          g_mu = 1.0d0/dx(1)*(25.0d0/12.0d0*phi(CHF_IX[i;j;k;l],1)-4.0d0*phi(CHF_IX[i;j;k;l-1],1)
     &           +3.0d0*phi(CHF_IX[i;j;k;l-2],1)-4.0d0/3.0d0*phi(CHF_IX[i;j;k;l-3],1)+1.0d0/4.0d0*phi(CHF_IX[i;j;k;l-4],1))
          
          g_mu_mu = 1.0d0/dx(1)/dx(1)*(15.0d0/4.0d0*phi(CHF_IX[i;j;k;l],1)-77.0d0/6.0d0*phi(CHF_IX[i;j;k;l-1],1)+107.0d0/6.0d0*phi(CHF_IX[i;j;k;l-2],1)
     &             -13.0d0*phi(CHF_IX[i;j;k;l-3],1)+61.0d0/12.0d0*phi(CHF_IX[i;j;k;l-4],1)-5.0d0/6.0d0*phi(CHF_IX[i;j;k;l-5],1))

          if ((k.gt.(-Nvpar/2+1)).and.(k.lt.(Nvpar/2-2))) then

            g_v_lo3 = (1.0d0/12.0d0/dx(0))*(8.0d0*(phi(CHF_IX[i;j;k+1;l-3],1)-phi(CHF_IX[i;j;k-1;l-3],1))
     &                         -(phi(CHF_IX[i;j;k+2;l-3],1)-phi(CHF_IX[i;j;k-2;l-3],1)))

            g_v_lo4 = (1.0d0/12.0d0/dx(0))*(8.0d0*(phi(CHF_IX[i;j;k+1;l-4],1)-phi(CHF_IX[i;j;k-1;l-4],1))
     &                         -(phi(CHF_IX[i;j;k+2;l-4],1)-phi(CHF_IX[i;j;k-2;l-4],1)))

          else if ((k.eq.(Nvpar/2-1)).or.(k.eq.(Nvpar/2-2))) then

            g_v_lo3 = 1.0d0/dx(0)*(25.0d0/12.0d0*phi(CHF_IX[i;j;k;l-3],1)-4.0d0*phi(CHF_IX[i;j;k-1;l-3],1)
     &              +3.0d0*phi(CHF_IX[i;j;k-2;l-3],1)-4.0d0/3.0d0*phi(CHF_IX[i;j;k-3;l-3],1)+1.0d0/4.0d0*phi(CHF_IX[i;j;k-4;l-3],1))

            g_v_lo4 = 1.0d0/dx(0)*(25.0d0/12.0d0*phi(CHF_IX[i;j;k;l-4],1)-4.0d0*phi(CHF_IX[i;j;k-1;l-4],1)
     &              +3.0d0*phi(CHF_IX[i;j;k-2;l-4],1)-4.0d0/3.0d0*phi(CHF_IX[i;j;k-3;l-4],1)+1.0d0/4.0d0*phi(CHF_IX[i;j;k-4;l-4],1))

          else 

            g_v_lo3 = 1.0d0/dx(0)*(-25.0d0/12.0d0*phi(CHF_IX[i;j;k;l-3],1)+4.0d0*phi(CHF_IX[i;j;k+1;l-3],1)
     &              -3.0d0*phi(CHF_IX[i;j;k+2;l-3],1)+4.0d0/3.0d0*phi(CHF_IX[i;j;k+3;l-3],1)-1.0d0/4.0d0*phi(CHF_IX[i;j;k+4;l-3],1))

            g_v_lo4 = 1.0d0/dx(0)*(-25.0d0/12.0d0*phi(CHF_IX[i;j;k;l-4],1)+4.0d0*phi(CHF_IX[i;j;k+1;l-4],1)
     &              -3.0d0*phi(CHF_IX[i;j;k+2;l-4],1)+4.0d0/3.0d0*phi(CHF_IX[i;j;k+3;l-4],1)-1.0d0/4.0d0*phi(CHF_IX[i;j;k+4;l-4],1))

          endif

          
          g_v_mu = (1.0d0/dx(1))*(25.0d0/12.0d0 * g_v - 4.0d0 * g_v_lo1 + 3.0d0 * g_v_lo2 
     &                            - 4.0d0/3.0d0 * g_v_lo3 + 1.0d0/4.0d0 *g_v_lo4)
          
        endif


c      *** Calculate collisional flux 
       b = bmag(i,j,CHF_LBOUND[bmag;2],CHF_LBOUND[bmag;3])
       mu=(l+0.5) * dx(1)
       
       D_v      = (mTP/mFP) * h_v
       D_v_v    = -g_v_v
       D_v_mu   = -2.0d0 * mTP / b * mu * g_v_mu
       D_mu     = 2.0d0 * (mTP/mFP) * mTP / b * mu * h_mu
c      D_mu_v   = -2.0d0 * mTP / b * mu * g_v_mu
       D_mu_mu  = -2.0d0 * mTP * mTP /(b*b) * mu * (2.0d0 * mu * g_mu_mu + g_mu)

       D(CHF_IX[i;j;k;l],0) = D_v
       D(CHF_IX[i;j;k;l],1) = D_mu
       D(CHF_IX[i;j;k;l],2) = D_v_v
       D(CHF_IX[i;j;k;l],3) = D_v_mu ! = D_mu_v
       D(CHF_IX[i;j;k;l],4) = D_mu_mu

      CHF_ENDDO

      return

      end


      subroutine evaluate_flux_cell_low_order(
     &     CHF_FRA[flux],
     &     CHF_CONST_FRA1[f],
     &     CHF_CONST_FRA[D],
     &     CHF_BOX[gridbox],
     &     CHF_CONST_REALVECT[dx],
     &     CHF_CONST_INT[Nvpar],
     &     CHF_CONST_INT[Nmu]
     &     )

c     local variables
      integer CHF_DDECL[i;j;k;l]
      double precision f_v, f_mu
      double precision D_v, D_mu, D_mu_v, D_v_mu, D_v_v, D_mu_mu, dvinv, dmuinv

      dvinv = 1.0d0/dx(0)
      dmuinv= 1.0d0/dx(1)

      CHF_MULTIDO[gridbox;i;j;k;l]
       
c      *** Calculate necessary phi derivatives; notation is used from Z. Xiong, JCP 2008

        f_v  = 0.5*(f(CHF_IX[i;j;k+1;l])-f(CHF_IX[i;j;k-1;l]))*dvinv
        f_mu = 0.5*(f(CHF_IX[i;j;k;l+1])-f(CHF_IX[i;j;k;l-1]))*dmuinv

c      *** Calculate collisional flux 
       
       D_v     = D(CHF_IX[i;j;k;l],0) ! = (mTP/mFP) * h_v
       D_mu    = D(CHF_IX[i;j;k;l],1) ! = 2.0d0 * (mTP/mFP) * mTP / b * mu * h_mu
       D_v_v   = D(CHF_IX[i;j;k;l],2) ! = -g_v_v
       D_v_mu  = D(CHF_IX[i;j;k;l],3) ! = -2.0d0 * mTP / b * mu * g_v_mu
       D_mu_v  = D(CHF_IX[i;j;k;l],3) ! = -2.0d0 * mTP / b * mu * g_v_mu
       D_mu_mu = D(CHF_IX[i;j;k;l],4) ! = -2.0d0 * mTP * mTP /(b*b) * mu * (2.0d0 * mu * g_mu_mu + g_mu)

       flux(CHF_IX[i;j;k;l],0) = D_v * f(CHF_IX[i;j;k;l]) + D_v_v * f_v + 2.0d0 * D_v_mu * f_mu
       flux(CHF_IX[i;j;k;l],1) = 2.0d0 * (D_mu * f(CHF_IX[i;j;k;l]) + D_mu_v * f_v + 2.0d0 * D_mu_mu * f_mu)
      CHF_ENDDO

      return

      end


      subroutine evaluate_fokkerplanck_rhs(
     &     CHF_FRA1[rhs],
     &     CHF_CONST_FRA[flux],
     &     CHF_BOX[gridbox],
     &     CHF_CONST_REALVECT[dx],
     &     CHF_CONST_INT[Nvpar],
     &     CHF_CONST_INT[Nmu]
     &     )

c     local variables
      integer CHF_DDECL[i;j;k;l]
      double precision flux_v, flux_mu, dvinv, dmuinv

      dvinv = 1.0d0/dx(0)
      dmuinv= 1.0d0/dx(1)
      CHF_MULTIDO[gridbox;i;j;k;l]

        flux_v = 0.5*(flux(CHF_IX[i;j;k+1;l],0)-flux(CHF_IX[i;j;k-1;l],0))*dvinv
        flux_mu= 0.5*(flux(CHF_IX[i;j;k;l+1],1)-flux(CHF_IX[i;j;k;l-1],1))*dmuinv
        rhs(CHF_IX[i;j;k;l]) = flux_v + flux_mu

      CHF_ENDDO

      return

      end
